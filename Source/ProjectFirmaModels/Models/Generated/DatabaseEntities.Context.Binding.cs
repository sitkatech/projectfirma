
//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Data.Entity;
using System.Data.Entity.Infrastructure;
using System.Linq;
using CodeFirstStoreFunctions;
using LtInfo.Common;
using LtInfo.Common.DesignByContract;
using LtInfo.Common.Models;

namespace ProjectFirmaModels.Models
{
    public partial class DatabaseEntities : DbContext, LtInfo.Common.EntityModelBinding.ILtInfoEntityTypeLoader
    {
        static DatabaseEntities()
        {
            System.Data.Entity.Database.SetInitializer<DatabaseEntities>(null);
        }

        public int TenantID { get; }

        public DatabaseEntities(int tenantID, string connectionString) : base(connectionString)
        {
            TenantID = tenantID;
        }

        public DatabaseEntities(int tenantID)
            : base("name=DatabaseEntities")
        {
           TenantID = tenantID;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            base.OnModelCreating(modelBuilder);
            modelBuilder.Configurations.Add(new AssessmentGoalConfiguration());
            modelBuilder.Configurations.Add(new AssessmentQuestionConfiguration());
            modelBuilder.Configurations.Add(new AssessmentSubGoalConfiguration());
            modelBuilder.Configurations.Add(new AttachmentTypeConfiguration());
            modelBuilder.Configurations.Add(new AttachmentTypeFileResourceMimeTypeConfiguration());
            modelBuilder.Configurations.Add(new AttachmentTypeRoleConfiguration());
            modelBuilder.Configurations.Add(new AttachmentTypeTaxonomyTrunkConfiguration());
            modelBuilder.Configurations.Add(new AuditLogConfiguration());
            modelBuilder.Configurations.Add(new ClassificationConfiguration());
            modelBuilder.Configurations.Add(new ClassificationPerformanceMeasureConfiguration());
            modelBuilder.Configurations.Add(new ClassificationSystemConfiguration());
            modelBuilder.Configurations.Add(new ContactRelationshipTypeConfiguration());
            modelBuilder.Configurations.Add(new CostTypeConfiguration());
            modelBuilder.Configurations.Add(new CountyConfiguration());
            modelBuilder.Configurations.Add(new CustomPageConfiguration());
            modelBuilder.Configurations.Add(new CustomPageImageConfiguration());
            modelBuilder.Configurations.Add(new CustomPageRoleConfiguration());
            modelBuilder.Configurations.Add(new DocumentLibraryConfiguration());
            modelBuilder.Configurations.Add(new DocumentLibraryDocumentConfiguration());
            modelBuilder.Configurations.Add(new DocumentLibraryDocumentCategoryConfiguration());
            modelBuilder.Configurations.Add(new DocumentLibraryDocumentRoleConfiguration());
            modelBuilder.Configurations.Add(new EvaluationConfiguration());
            modelBuilder.Configurations.Add(new EvaluationCriteriaConfiguration());
            modelBuilder.Configurations.Add(new EvaluationCriteriaValueConfiguration());
            modelBuilder.Configurations.Add(new ExternalMapLayerConfiguration());
            modelBuilder.Configurations.Add(new FieldDefinitionConfiguration());
            modelBuilder.Configurations.Add(new FieldDefinitionDataConfiguration());
            modelBuilder.Configurations.Add(new FieldDefinitionDataImageConfiguration());
            modelBuilder.Configurations.Add(new FieldDefinitionDefaultConfiguration());
            modelBuilder.Configurations.Add(new FileResourceDataConfiguration());
            modelBuilder.Configurations.Add(new FileResourceInfoConfiguration());
            modelBuilder.Configurations.Add(new FirmaHomePageImageConfiguration());
            modelBuilder.Configurations.Add(new FirmaPageConfiguration());
            modelBuilder.Configurations.Add(new FirmaPageImageConfiguration());
            modelBuilder.Configurations.Add(new FirmaPageTypeConfiguration());
            modelBuilder.Configurations.Add(new FirmaSessionConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceCustomAttributeConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceCustomAttributeTypeConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceCustomAttributeTypeRoleConfiguration());
            modelBuilder.Configurations.Add(new FundingSourceCustomAttributeValueConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaImageConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaPerformanceMeasureFixedTargetConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaPerformanceMeasureNoTargetConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaPerformanceMeasureReportingPeriodTargetConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaRawDataConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaStagingConfiguration());
            modelBuilder.Configurations.Add(new GeospatialAreaTypeConfiguration());
            modelBuilder.Configurations.Add(new ImportExternalProjectStagingConfiguration());
            modelBuilder.Configurations.Add(new LastSQLServerDatabaseBackupConfiguration());
            modelBuilder.Configurations.Add(new MatchMakerAreaOfInterestLocationConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerKeywordConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerOrganizationClassificationConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerOrganizationPerformanceMeasureConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerOrganizationTaxonomyBranchConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerOrganizationTaxonomyLeafConfiguration());
            modelBuilder.Configurations.Add(new MatchmakerOrganizationTaxonomyTrunkConfiguration());
            modelBuilder.Configurations.Add(new NotificationConfiguration());
            modelBuilder.Configurations.Add(new NotificationProjectConfiguration());
            modelBuilder.Configurations.Add(new OrganizationConfiguration());
            modelBuilder.Configurations.Add(new OrganizationBoundaryStagingConfiguration());
            modelBuilder.Configurations.Add(new OrganizationImageConfiguration());
            modelBuilder.Configurations.Add(new OrganizationMatchmakerKeywordConfiguration());
            modelBuilder.Configurations.Add(new OrganizationRelationshipTypeConfiguration());
            modelBuilder.Configurations.Add(new OrganizationTypeConfiguration());
            modelBuilder.Configurations.Add(new OrganizationTypeOrganizationRelationshipTypeConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureActualConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureActualSubcategoryOptionConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureActualSubcategoryOptionUpdateConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureActualUpdateConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureExpectedConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureExpectedSubcategoryOptionConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureExpectedSubcategoryOptionUpdateConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureExpectedUpdateConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureFixedTargetConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureGroupConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureImageConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureNoteConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureReportingPeriodConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureReportingPeriodTargetConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureSubcategoryConfiguration());
            modelBuilder.Configurations.Add(new PerformanceMeasureSubcategoryOptionConfiguration());
            modelBuilder.Configurations.Add(new PersonConfiguration());
            modelBuilder.Configurations.Add(new PersonLoginAccountConfiguration());
            modelBuilder.Configurations.Add(new PersonSettingGridColumnConfiguration());
            modelBuilder.Configurations.Add(new PersonSettingGridColumnSettingConfiguration());
            modelBuilder.Configurations.Add(new PersonSettingGridColumnSettingFilterConfiguration());
            modelBuilder.Configurations.Add(new PersonSettingGridTableConfiguration());
            modelBuilder.Configurations.Add(new PersonStewardGeospatialAreaConfiguration());
            modelBuilder.Configurations.Add(new PersonStewardOrganizationConfiguration());
            modelBuilder.Configurations.Add(new PersonStewardTaxonomyBranchConfiguration());
            modelBuilder.Configurations.Add(new ProjectConfiguration());
            modelBuilder.Configurations.Add(new ProjectAssessmentQuestionConfiguration());
            modelBuilder.Configurations.Add(new ProjectAttachmentConfiguration());
            modelBuilder.Configurations.Add(new ProjectAttachmentUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectClassificationConfiguration());
            modelBuilder.Configurations.Add(new ProjectClassificationUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectContactConfiguration());
            modelBuilder.Configurations.Add(new ProjectContactUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeGroupConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeGroupProjectCategoryConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeTypeConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeTypeRoleConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeUpdateValueConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomAttributeValueConfiguration());
            modelBuilder.Configurations.Add(new ProjectCustomGridConfigurationConfiguration());
            modelBuilder.Configurations.Add(new ProjectEvaluationConfiguration());
            modelBuilder.Configurations.Add(new ProjectEvaluationSelectedValueConfiguration());
            modelBuilder.Configurations.Add(new ProjectExemptReportingYearConfiguration());
            modelBuilder.Configurations.Add(new ProjectExemptReportingYearUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectExternalLinkConfiguration());
            modelBuilder.Configurations.Add(new ProjectExternalLinkUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectFundingSourceBudgetConfiguration());
            modelBuilder.Configurations.Add(new ProjectFundingSourceBudgetUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectFundingSourceExpenditureConfiguration());
            modelBuilder.Configurations.Add(new ProjectFundingSourceExpenditureUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectGeospatialAreaConfiguration());
            modelBuilder.Configurations.Add(new ProjectGeospatialAreaTypeNoteConfiguration());
            modelBuilder.Configurations.Add(new ProjectGeospatialAreaTypeNoteUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectGeospatialAreaUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectImageConfiguration());
            modelBuilder.Configurations.Add(new ProjectImageUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectInternalNoteConfiguration());
            modelBuilder.Configurations.Add(new ProjectLocationConfiguration());
            modelBuilder.Configurations.Add(new ProjectLocationStagingConfiguration());
            modelBuilder.Configurations.Add(new ProjectLocationStagingUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectLocationUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectNoFundingSourceIdentifiedConfiguration());
            modelBuilder.Configurations.Add(new ProjectNoFundingSourceIdentifiedUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectNoteConfiguration());
            modelBuilder.Configurations.Add(new ProjectNoteUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectOrganizationConfiguration());
            modelBuilder.Configurations.Add(new ProjectOrganizationUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectProjectStatusConfiguration());
            modelBuilder.Configurations.Add(new ProjectRelevantCostTypeConfiguration());
            modelBuilder.Configurations.Add(new ProjectRelevantCostTypeUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectStageCustomLabelConfiguration());
            modelBuilder.Configurations.Add(new ProjectStatusConfiguration());
            modelBuilder.Configurations.Add(new ProjectTagConfiguration());
            modelBuilder.Configurations.Add(new ProjectUpdateConfiguration());
            modelBuilder.Configurations.Add(new ProjectUpdateBatchConfiguration());
            modelBuilder.Configurations.Add(new ProjectUpdateBatchClassificationSystemConfiguration());
            modelBuilder.Configurations.Add(new ProjectUpdateHistoryConfiguration());
            modelBuilder.Configurations.Add(new ProjectUpdateSettingConfiguration());
            modelBuilder.Configurations.Add(new ReleaseNoteConfiguration());
            modelBuilder.Configurations.Add(new ReportTemplateConfiguration());
            modelBuilder.Configurations.Add(new SecondaryProjectTaxonomyLeafConfiguration());
            modelBuilder.Configurations.Add(new SolicitationConfiguration());
            modelBuilder.Configurations.Add(new StateProvinceConfiguration());
            modelBuilder.Configurations.Add(new SupportRequestLogConfiguration());
            modelBuilder.Configurations.Add(new TagConfiguration());
            modelBuilder.Configurations.Add(new TaxonomyBranchConfiguration());
            modelBuilder.Configurations.Add(new TaxonomyLeafConfiguration());
            modelBuilder.Configurations.Add(new TaxonomyLeafPerformanceMeasureConfiguration());
            modelBuilder.Configurations.Add(new TaxonomyTrunkConfiguration());
            modelBuilder.Configurations.Add(new TenantAttributeConfiguration());
            modelBuilder.Configurations.Add(new TrainingVideoConfiguration());
            modelBuilder.Configurations.Add(new TrainingVideoRoleConfiguration());
            modelBuilder.Configurations.Add(new vGeoServerGeospatialAreaConfiguration());
            modelBuilder.Configurations.Add(new vGeoServerProjectDetailedLocationsConfiguration());
            modelBuilder.Configurations.Add(new vGeoServerProjectSimpleLocationsConfiguration());
            modelBuilder.Configurations.Add(new vGeospatialAreaConfiguration());
            modelBuilder.Configurations.Add(new vProjectAttachmentConfiguration());
            modelBuilder.Configurations.Add(new vProjectCustomAttributeValueConfiguration());
            modelBuilder.Configurations.Add(new vProjectDetailConfiguration());
            modelBuilder.Configurations.Add(new vProjectFunctionallyCompleteConfiguration());
            modelBuilder.Conventions.Add(new FunctionsConvention<DatabaseEntities>("dbo"));
        }
        public virtual DbSet<AssessmentGoal> AllAssessmentGoals { get; set; }
        public virtual IQueryable<AssessmentGoal> AssessmentGoals { get { return AllAssessmentGoals.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AssessmentQuestion> AllAssessmentQuestions { get; set; }
        public virtual IQueryable<AssessmentQuestion> AssessmentQuestions { get { return AllAssessmentQuestions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AssessmentSubGoal> AllAssessmentSubGoals { get; set; }
        public virtual IQueryable<AssessmentSubGoal> AssessmentSubGoals { get { return AllAssessmentSubGoals.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AttachmentTypeFileResourceMimeType> AllAttachmentTypeFileResourceMimeTypes { get; set; }
        public virtual IQueryable<AttachmentTypeFileResourceMimeType> AttachmentTypeFileResourceMimeTypes { get { return AllAttachmentTypeFileResourceMimeTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AttachmentTypeRole> AllAttachmentTypeRoles { get; set; }
        public virtual IQueryable<AttachmentTypeRole> AttachmentTypeRoles { get { return AllAttachmentTypeRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AttachmentType> AllAttachmentTypes { get; set; }
        public virtual IQueryable<AttachmentType> AttachmentTypes { get { return AllAttachmentTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AttachmentTypeTaxonomyTrunk> AllAttachmentTypeTaxonomyTrunks { get; set; }
        public virtual IQueryable<AttachmentTypeTaxonomyTrunk> AttachmentTypeTaxonomyTrunks { get { return AllAttachmentTypeTaxonomyTrunks.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<AuditLog> AllAuditLogs { get; set; }
        public virtual IQueryable<AuditLog> AuditLogs { get { return AllAuditLogs.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ClassificationPerformanceMeasure> AllClassificationPerformanceMeasures { get; set; }
        public virtual IQueryable<ClassificationPerformanceMeasure> ClassificationPerformanceMeasures { get { return AllClassificationPerformanceMeasures.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Classification> AllClassifications { get; set; }
        public virtual IQueryable<Classification> Classifications { get { return AllClassifications.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ClassificationSystem> AllClassificationSystems { get; set; }
        public virtual IQueryable<ClassificationSystem> ClassificationSystems { get { return AllClassificationSystems.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ContactRelationshipType> AllContactRelationshipTypes { get; set; }
        public virtual IQueryable<ContactRelationshipType> ContactRelationshipTypes { get { return AllContactRelationshipTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<CostType> AllCostTypes { get; set; }
        public virtual IQueryable<CostType> CostTypes { get { return AllCostTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<County> AllCounties { get; set; }
        public virtual IQueryable<County> Counties { get { return AllCounties.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<CustomPageImage> AllCustomPageImages { get; set; }
        public virtual IQueryable<CustomPageImage> CustomPageImages { get { return AllCustomPageImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<CustomPageRole> AllCustomPageRoles { get; set; }
        public virtual IQueryable<CustomPageRole> CustomPageRoles { get { return AllCustomPageRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<CustomPage> AllCustomPages { get; set; }
        public virtual IQueryable<CustomPage> CustomPages { get { return AllCustomPages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<DocumentLibrary> AllDocumentLibraries { get; set; }
        public virtual IQueryable<DocumentLibrary> DocumentLibraries { get { return AllDocumentLibraries.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<DocumentLibraryDocumentCategory> AllDocumentLibraryDocumentCategories { get; set; }
        public virtual IQueryable<DocumentLibraryDocumentCategory> DocumentLibraryDocumentCategories { get { return AllDocumentLibraryDocumentCategories.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<DocumentLibraryDocumentRole> AllDocumentLibraryDocumentRoles { get; set; }
        public virtual IQueryable<DocumentLibraryDocumentRole> DocumentLibraryDocumentRoles { get { return AllDocumentLibraryDocumentRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<DocumentLibraryDocument> AllDocumentLibraryDocuments { get; set; }
        public virtual IQueryable<DocumentLibraryDocument> DocumentLibraryDocuments { get { return AllDocumentLibraryDocuments.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<EvaluationCriteria> AllEvaluationCriterias { get; set; }
        public virtual IQueryable<EvaluationCriteria> EvaluationCriterias { get { return AllEvaluationCriterias.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<EvaluationCriteriaValue> AllEvaluationCriteriaValues { get; set; }
        public virtual IQueryable<EvaluationCriteriaValue> EvaluationCriteriaValues { get { return AllEvaluationCriteriaValues.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Evaluation> AllEvaluations { get; set; }
        public virtual IQueryable<Evaluation> Evaluations { get { return AllEvaluations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ExternalMapLayer> AllExternalMapLayers { get; set; }
        public virtual IQueryable<ExternalMapLayer> ExternalMapLayers { get { return AllExternalMapLayers.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FieldDefinitionDataImage> AllFieldDefinitionDataImages { get; set; }
        public virtual IQueryable<FieldDefinitionDataImage> FieldDefinitionDataImages { get { return AllFieldDefinitionDataImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FieldDefinitionData> AllFieldDefinitionDatas { get; set; }
        public virtual IQueryable<FieldDefinitionData> FieldDefinitionDatas { get { return AllFieldDefinitionDatas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FieldDefinitionDefault> FieldDefinitionDefaults { get; set; }
        public virtual DbSet<FieldDefinition> FieldDefinitions { get; set; }
        public virtual DbSet<FileResourceData> AllFileResourceDatas { get; set; }
        public virtual IQueryable<FileResourceData> FileResourceDatas { get { return AllFileResourceDatas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FileResourceInfo> AllFileResourceInfos { get; set; }
        public virtual IQueryable<FileResourceInfo> FileResourceInfos { get { return AllFileResourceInfos.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FirmaHomePageImage> AllFirmaHomePageImages { get; set; }
        public virtual IQueryable<FirmaHomePageImage> FirmaHomePageImages { get { return AllFirmaHomePageImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FirmaPageImage> AllFirmaPageImages { get; set; }
        public virtual IQueryable<FirmaPageImage> FirmaPageImages { get { return AllFirmaPageImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FirmaPage> AllFirmaPages { get; set; }
        public virtual IQueryable<FirmaPage> FirmaPages { get { return AllFirmaPages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FirmaPageType> FirmaPageTypes { get; set; }
        public virtual DbSet<FirmaSession> AllFirmaSessions { get; set; }
        public virtual IQueryable<FirmaSession> FirmaSessions { get { return AllFirmaSessions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FundingSourceCustomAttribute> AllFundingSourceCustomAttributes { get; set; }
        public virtual IQueryable<FundingSourceCustomAttribute> FundingSourceCustomAttributes { get { return AllFundingSourceCustomAttributes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FundingSourceCustomAttributeTypeRole> AllFundingSourceCustomAttributeTypeRoles { get; set; }
        public virtual IQueryable<FundingSourceCustomAttributeTypeRole> FundingSourceCustomAttributeTypeRoles { get { return AllFundingSourceCustomAttributeTypeRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FundingSourceCustomAttributeType> AllFundingSourceCustomAttributeTypes { get; set; }
        public virtual IQueryable<FundingSourceCustomAttributeType> FundingSourceCustomAttributeTypes { get { return AllFundingSourceCustomAttributeTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FundingSourceCustomAttributeValue> AllFundingSourceCustomAttributeValues { get; set; }
        public virtual IQueryable<FundingSourceCustomAttributeValue> FundingSourceCustomAttributeValues { get { return AllFundingSourceCustomAttributeValues.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<FundingSource> AllFundingSources { get; set; }
        public virtual IQueryable<FundingSource> FundingSources { get { return AllFundingSources.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaImage> AllGeospatialAreaImages { get; set; }
        public virtual IQueryable<GeospatialAreaImage> GeospatialAreaImages { get { return AllGeospatialAreaImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaPerformanceMeasureFixedTarget> AllGeospatialAreaPerformanceMeasureFixedTargets { get; set; }
        public virtual IQueryable<GeospatialAreaPerformanceMeasureFixedTarget> GeospatialAreaPerformanceMeasureFixedTargets { get { return AllGeospatialAreaPerformanceMeasureFixedTargets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaPerformanceMeasureNoTarget> AllGeospatialAreaPerformanceMeasureNoTargets { get; set; }
        public virtual IQueryable<GeospatialAreaPerformanceMeasureNoTarget> GeospatialAreaPerformanceMeasureNoTargets { get { return AllGeospatialAreaPerformanceMeasureNoTargets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaPerformanceMeasureReportingPeriodTarget> AllGeospatialAreaPerformanceMeasureReportingPeriodTargets { get; set; }
        public virtual IQueryable<GeospatialAreaPerformanceMeasureReportingPeriodTarget> GeospatialAreaPerformanceMeasureReportingPeriodTargets { get { return AllGeospatialAreaPerformanceMeasureReportingPeriodTargets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaRawData> AllGeospatialAreaRawDatas { get; set; }
        public virtual IQueryable<GeospatialAreaRawData> GeospatialAreaRawDatas { get { return AllGeospatialAreaRawDatas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialArea> AllGeospatialAreas { get; set; }
        public virtual IQueryable<GeospatialArea> GeospatialAreas { get { return AllGeospatialAreas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaStaging> AllGeospatialAreaStagings { get; set; }
        public virtual IQueryable<GeospatialAreaStaging> GeospatialAreaStagings { get { return AllGeospatialAreaStagings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<GeospatialAreaType> AllGeospatialAreaTypes { get; set; }
        public virtual IQueryable<GeospatialAreaType> GeospatialAreaTypes { get { return AllGeospatialAreaTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ImportExternalProjectStaging> AllImportExternalProjectStagings { get; set; }
        public virtual IQueryable<ImportExternalProjectStaging> ImportExternalProjectStagings { get { return AllImportExternalProjectStagings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<LastSQLServerDatabaseBackup> LastSQLServerDatabaseBackups { get; set; }
        public virtual DbSet<MatchMakerAreaOfInterestLocation> AllMatchMakerAreaOfInterestLocations { get; set; }
        public virtual IQueryable<MatchMakerAreaOfInterestLocation> MatchMakerAreaOfInterestLocations { get { return AllMatchMakerAreaOfInterestLocations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerKeyword> AllMatchmakerKeywords { get; set; }
        public virtual IQueryable<MatchmakerKeyword> MatchmakerKeywords { get { return AllMatchmakerKeywords.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerOrganizationClassification> AllMatchmakerOrganizationClassifications { get; set; }
        public virtual IQueryable<MatchmakerOrganizationClassification> MatchmakerOrganizationClassifications { get { return AllMatchmakerOrganizationClassifications.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerOrganizationPerformanceMeasure> AllMatchmakerOrganizationPerformanceMeasures { get; set; }
        public virtual IQueryable<MatchmakerOrganizationPerformanceMeasure> MatchmakerOrganizationPerformanceMeasures { get { return AllMatchmakerOrganizationPerformanceMeasures.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerOrganizationTaxonomyBranch> AllMatchmakerOrganizationTaxonomyBranches { get; set; }
        public virtual IQueryable<MatchmakerOrganizationTaxonomyBranch> MatchmakerOrganizationTaxonomyBranches { get { return AllMatchmakerOrganizationTaxonomyBranches.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerOrganizationTaxonomyLeaf> AllMatchmakerOrganizationTaxonomyLeafs { get; set; }
        public virtual IQueryable<MatchmakerOrganizationTaxonomyLeaf> MatchmakerOrganizationTaxonomyLeafs { get { return AllMatchmakerOrganizationTaxonomyLeafs.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<MatchmakerOrganizationTaxonomyTrunk> AllMatchmakerOrganizationTaxonomyTrunks { get; set; }
        public virtual IQueryable<MatchmakerOrganizationTaxonomyTrunk> MatchmakerOrganizationTaxonomyTrunks { get { return AllMatchmakerOrganizationTaxonomyTrunks.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<NotificationProject> AllNotificationProjects { get; set; }
        public virtual IQueryable<NotificationProject> NotificationProjects { get { return AllNotificationProjects.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Notification> AllNotifications { get; set; }
        public virtual IQueryable<Notification> Notifications { get { return AllNotifications.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationBoundaryStaging> AllOrganizationBoundaryStagings { get; set; }
        public virtual IQueryable<OrganizationBoundaryStaging> OrganizationBoundaryStagings { get { return AllOrganizationBoundaryStagings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationImage> AllOrganizationImages { get; set; }
        public virtual IQueryable<OrganizationImage> OrganizationImages { get { return AllOrganizationImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationMatchmakerKeyword> AllOrganizationMatchmakerKeywords { get; set; }
        public virtual IQueryable<OrganizationMatchmakerKeyword> OrganizationMatchmakerKeywords { get { return AllOrganizationMatchmakerKeywords.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationRelationshipType> AllOrganizationRelationshipTypes { get; set; }
        public virtual IQueryable<OrganizationRelationshipType> OrganizationRelationshipTypes { get { return AllOrganizationRelationshipTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Organization> AllOrganizations { get; set; }
        public virtual IQueryable<Organization> Organizations { get { return AllOrganizations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationTypeOrganizationRelationshipType> AllOrganizationTypeOrganizationRelationshipTypes { get; set; }
        public virtual IQueryable<OrganizationTypeOrganizationRelationshipType> OrganizationTypeOrganizationRelationshipTypes { get { return AllOrganizationTypeOrganizationRelationshipTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<OrganizationType> AllOrganizationTypes { get; set; }
        public virtual IQueryable<OrganizationType> OrganizationTypes { get { return AllOrganizationTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Person> AllPeople { get; set; }
        public virtual IQueryable<Person> People { get { return AllPeople.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureActual> AllPerformanceMeasureActuals { get; set; }
        public virtual IQueryable<PerformanceMeasureActual> PerformanceMeasureActuals { get { return AllPerformanceMeasureActuals.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureActualSubcategoryOption> AllPerformanceMeasureActualSubcategoryOptions { get; set; }
        public virtual IQueryable<PerformanceMeasureActualSubcategoryOption> PerformanceMeasureActualSubcategoryOptions { get { return AllPerformanceMeasureActualSubcategoryOptions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureActualSubcategoryOptionUpdate> AllPerformanceMeasureActualSubcategoryOptionUpdates { get; set; }
        public virtual IQueryable<PerformanceMeasureActualSubcategoryOptionUpdate> PerformanceMeasureActualSubcategoryOptionUpdates { get { return AllPerformanceMeasureActualSubcategoryOptionUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureActualUpdate> AllPerformanceMeasureActualUpdates { get; set; }
        public virtual IQueryable<PerformanceMeasureActualUpdate> PerformanceMeasureActualUpdates { get { return AllPerformanceMeasureActualUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureExpected> AllPerformanceMeasureExpecteds { get; set; }
        public virtual IQueryable<PerformanceMeasureExpected> PerformanceMeasureExpecteds { get { return AllPerformanceMeasureExpecteds.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureExpectedSubcategoryOption> AllPerformanceMeasureExpectedSubcategoryOptions { get; set; }
        public virtual IQueryable<PerformanceMeasureExpectedSubcategoryOption> PerformanceMeasureExpectedSubcategoryOptions { get { return AllPerformanceMeasureExpectedSubcategoryOptions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureExpectedSubcategoryOptionUpdate> AllPerformanceMeasureExpectedSubcategoryOptionUpdates { get; set; }
        public virtual IQueryable<PerformanceMeasureExpectedSubcategoryOptionUpdate> PerformanceMeasureExpectedSubcategoryOptionUpdates { get { return AllPerformanceMeasureExpectedSubcategoryOptionUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureExpectedUpdate> AllPerformanceMeasureExpectedUpdates { get; set; }
        public virtual IQueryable<PerformanceMeasureExpectedUpdate> PerformanceMeasureExpectedUpdates { get { return AllPerformanceMeasureExpectedUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureFixedTarget> AllPerformanceMeasureFixedTargets { get; set; }
        public virtual IQueryable<PerformanceMeasureFixedTarget> PerformanceMeasureFixedTargets { get { return AllPerformanceMeasureFixedTargets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureGroup> AllPerformanceMeasureGroups { get; set; }
        public virtual IQueryable<PerformanceMeasureGroup> PerformanceMeasureGroups { get { return AllPerformanceMeasureGroups.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureImage> AllPerformanceMeasureImages { get; set; }
        public virtual IQueryable<PerformanceMeasureImage> PerformanceMeasureImages { get { return AllPerformanceMeasureImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureNote> AllPerformanceMeasureNotes { get; set; }
        public virtual IQueryable<PerformanceMeasureNote> PerformanceMeasureNotes { get { return AllPerformanceMeasureNotes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureReportingPeriod> AllPerformanceMeasureReportingPeriods { get; set; }
        public virtual IQueryable<PerformanceMeasureReportingPeriod> PerformanceMeasureReportingPeriods { get { return AllPerformanceMeasureReportingPeriods.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureReportingPeriodTarget> AllPerformanceMeasureReportingPeriodTargets { get; set; }
        public virtual IQueryable<PerformanceMeasureReportingPeriodTarget> PerformanceMeasureReportingPeriodTargets { get { return AllPerformanceMeasureReportingPeriodTargets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasure> AllPerformanceMeasures { get; set; }
        public virtual IQueryable<PerformanceMeasure> PerformanceMeasures { get { return AllPerformanceMeasures.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureSubcategory> AllPerformanceMeasureSubcategories { get; set; }
        public virtual IQueryable<PerformanceMeasureSubcategory> PerformanceMeasureSubcategories { get { return AllPerformanceMeasureSubcategories.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PerformanceMeasureSubcategoryOption> AllPerformanceMeasureSubcategoryOptions { get; set; }
        public virtual IQueryable<PerformanceMeasureSubcategoryOption> PerformanceMeasureSubcategoryOptions { get { return AllPerformanceMeasureSubcategoryOptions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonLoginAccount> AllPersonLoginAccounts { get; set; }
        public virtual IQueryable<PersonLoginAccount> PersonLoginAccounts { get { return AllPersonLoginAccounts.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonSettingGridColumn> AllPersonSettingGridColumns { get; set; }
        public virtual IQueryable<PersonSettingGridColumn> PersonSettingGridColumns { get { return AllPersonSettingGridColumns.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonSettingGridColumnSettingFilter> AllPersonSettingGridColumnSettingFilters { get; set; }
        public virtual IQueryable<PersonSettingGridColumnSettingFilter> PersonSettingGridColumnSettingFilters { get { return AllPersonSettingGridColumnSettingFilters.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonSettingGridColumnSetting> AllPersonSettingGridColumnSettings { get; set; }
        public virtual IQueryable<PersonSettingGridColumnSetting> PersonSettingGridColumnSettings { get { return AllPersonSettingGridColumnSettings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonSettingGridTable> AllPersonSettingGridTables { get; set; }
        public virtual IQueryable<PersonSettingGridTable> PersonSettingGridTables { get { return AllPersonSettingGridTables.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonStewardGeospatialArea> AllPersonStewardGeospatialAreas { get; set; }
        public virtual IQueryable<PersonStewardGeospatialArea> PersonStewardGeospatialAreas { get { return AllPersonStewardGeospatialAreas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonStewardOrganization> AllPersonStewardOrganizations { get; set; }
        public virtual IQueryable<PersonStewardOrganization> PersonStewardOrganizations { get { return AllPersonStewardOrganizations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<PersonStewardTaxonomyBranch> AllPersonStewardTaxonomyBranches { get; set; }
        public virtual IQueryable<PersonStewardTaxonomyBranch> PersonStewardTaxonomyBranches { get { return AllPersonStewardTaxonomyBranches.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectAssessmentQuestion> AllProjectAssessmentQuestions { get; set; }
        public virtual IQueryable<ProjectAssessmentQuestion> ProjectAssessmentQuestions { get { return AllProjectAssessmentQuestions.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectAttachment> AllProjectAttachments { get; set; }
        public virtual IQueryable<ProjectAttachment> ProjectAttachments { get { return AllProjectAttachments.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectAttachmentUpdate> AllProjectAttachmentUpdates { get; set; }
        public virtual IQueryable<ProjectAttachmentUpdate> ProjectAttachmentUpdates { get { return AllProjectAttachmentUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectClassification> AllProjectClassifications { get; set; }
        public virtual IQueryable<ProjectClassification> ProjectClassifications { get { return AllProjectClassifications.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectClassificationUpdate> AllProjectClassificationUpdates { get; set; }
        public virtual IQueryable<ProjectClassificationUpdate> ProjectClassificationUpdates { get { return AllProjectClassificationUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectContact> AllProjectContacts { get; set; }
        public virtual IQueryable<ProjectContact> ProjectContacts { get { return AllProjectContacts.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectContactUpdate> AllProjectContactUpdates { get; set; }
        public virtual IQueryable<ProjectContactUpdate> ProjectContactUpdates { get { return AllProjectContactUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeGroupProjectCategory> AllProjectCustomAttributeGroupProjectCategories { get; set; }
        public virtual IQueryable<ProjectCustomAttributeGroupProjectCategory> ProjectCustomAttributeGroupProjectCategories { get { return AllProjectCustomAttributeGroupProjectCategories.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeGroup> AllProjectCustomAttributeGroups { get; set; }
        public virtual IQueryable<ProjectCustomAttributeGroup> ProjectCustomAttributeGroups { get { return AllProjectCustomAttributeGroups.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttribute> AllProjectCustomAttributes { get; set; }
        public virtual IQueryable<ProjectCustomAttribute> ProjectCustomAttributes { get { return AllProjectCustomAttributes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeTypeRole> AllProjectCustomAttributeTypeRoles { get; set; }
        public virtual IQueryable<ProjectCustomAttributeTypeRole> ProjectCustomAttributeTypeRoles { get { return AllProjectCustomAttributeTypeRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeType> AllProjectCustomAttributeTypes { get; set; }
        public virtual IQueryable<ProjectCustomAttributeType> ProjectCustomAttributeTypes { get { return AllProjectCustomAttributeTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeUpdate> AllProjectCustomAttributeUpdates { get; set; }
        public virtual IQueryable<ProjectCustomAttributeUpdate> ProjectCustomAttributeUpdates { get { return AllProjectCustomAttributeUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeUpdateValue> AllProjectCustomAttributeUpdateValues { get; set; }
        public virtual IQueryable<ProjectCustomAttributeUpdateValue> ProjectCustomAttributeUpdateValues { get { return AllProjectCustomAttributeUpdateValues.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomAttributeValue> AllProjectCustomAttributeValues { get; set; }
        public virtual IQueryable<ProjectCustomAttributeValue> ProjectCustomAttributeValues { get { return AllProjectCustomAttributeValues.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectCustomGridConfiguration> AllProjectCustomGridConfigurations { get; set; }
        public virtual IQueryable<ProjectCustomGridConfiguration> ProjectCustomGridConfigurations { get { return AllProjectCustomGridConfigurations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectEvaluation> AllProjectEvaluations { get; set; }
        public virtual IQueryable<ProjectEvaluation> ProjectEvaluations { get { return AllProjectEvaluations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectEvaluationSelectedValue> AllProjectEvaluationSelectedValues { get; set; }
        public virtual IQueryable<ProjectEvaluationSelectedValue> ProjectEvaluationSelectedValues { get { return AllProjectEvaluationSelectedValues.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectExemptReportingYear> AllProjectExemptReportingYears { get; set; }
        public virtual IQueryable<ProjectExemptReportingYear> ProjectExemptReportingYears { get { return AllProjectExemptReportingYears.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectExemptReportingYearUpdate> AllProjectExemptReportingYearUpdates { get; set; }
        public virtual IQueryable<ProjectExemptReportingYearUpdate> ProjectExemptReportingYearUpdates { get { return AllProjectExemptReportingYearUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectExternalLink> AllProjectExternalLinks { get; set; }
        public virtual IQueryable<ProjectExternalLink> ProjectExternalLinks { get { return AllProjectExternalLinks.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectExternalLinkUpdate> AllProjectExternalLinkUpdates { get; set; }
        public virtual IQueryable<ProjectExternalLinkUpdate> ProjectExternalLinkUpdates { get { return AllProjectExternalLinkUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectFundingSourceBudget> AllProjectFundingSourceBudgets { get; set; }
        public virtual IQueryable<ProjectFundingSourceBudget> ProjectFundingSourceBudgets { get { return AllProjectFundingSourceBudgets.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectFundingSourceBudgetUpdate> AllProjectFundingSourceBudgetUpdates { get; set; }
        public virtual IQueryable<ProjectFundingSourceBudgetUpdate> ProjectFundingSourceBudgetUpdates { get { return AllProjectFundingSourceBudgetUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectFundingSourceExpenditure> AllProjectFundingSourceExpenditures { get; set; }
        public virtual IQueryable<ProjectFundingSourceExpenditure> ProjectFundingSourceExpenditures { get { return AllProjectFundingSourceExpenditures.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectFundingSourceExpenditureUpdate> AllProjectFundingSourceExpenditureUpdates { get; set; }
        public virtual IQueryable<ProjectFundingSourceExpenditureUpdate> ProjectFundingSourceExpenditureUpdates { get { return AllProjectFundingSourceExpenditureUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectGeospatialArea> AllProjectGeospatialAreas { get; set; }
        public virtual IQueryable<ProjectGeospatialArea> ProjectGeospatialAreas { get { return AllProjectGeospatialAreas.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectGeospatialAreaTypeNote> AllProjectGeospatialAreaTypeNotes { get; set; }
        public virtual IQueryable<ProjectGeospatialAreaTypeNote> ProjectGeospatialAreaTypeNotes { get { return AllProjectGeospatialAreaTypeNotes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectGeospatialAreaTypeNoteUpdate> AllProjectGeospatialAreaTypeNoteUpdates { get; set; }
        public virtual IQueryable<ProjectGeospatialAreaTypeNoteUpdate> ProjectGeospatialAreaTypeNoteUpdates { get { return AllProjectGeospatialAreaTypeNoteUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectGeospatialAreaUpdate> AllProjectGeospatialAreaUpdates { get; set; }
        public virtual IQueryable<ProjectGeospatialAreaUpdate> ProjectGeospatialAreaUpdates { get { return AllProjectGeospatialAreaUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectImage> AllProjectImages { get; set; }
        public virtual IQueryable<ProjectImage> ProjectImages { get { return AllProjectImages.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectImageUpdate> AllProjectImageUpdates { get; set; }
        public virtual IQueryable<ProjectImageUpdate> ProjectImageUpdates { get { return AllProjectImageUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectInternalNote> AllProjectInternalNotes { get; set; }
        public virtual IQueryable<ProjectInternalNote> ProjectInternalNotes { get { return AllProjectInternalNotes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectLocation> AllProjectLocations { get; set; }
        public virtual IQueryable<ProjectLocation> ProjectLocations { get { return AllProjectLocations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectLocationStaging> AllProjectLocationStagings { get; set; }
        public virtual IQueryable<ProjectLocationStaging> ProjectLocationStagings { get { return AllProjectLocationStagings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectLocationStagingUpdate> AllProjectLocationStagingUpdates { get; set; }
        public virtual IQueryable<ProjectLocationStagingUpdate> ProjectLocationStagingUpdates { get { return AllProjectLocationStagingUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectLocationUpdate> AllProjectLocationUpdates { get; set; }
        public virtual IQueryable<ProjectLocationUpdate> ProjectLocationUpdates { get { return AllProjectLocationUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectNoFundingSourceIdentified> AllProjectNoFundingSourceIdentifieds { get; set; }
        public virtual IQueryable<ProjectNoFundingSourceIdentified> ProjectNoFundingSourceIdentifieds { get { return AllProjectNoFundingSourceIdentifieds.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectNoFundingSourceIdentifiedUpdate> AllProjectNoFundingSourceIdentifiedUpdates { get; set; }
        public virtual IQueryable<ProjectNoFundingSourceIdentifiedUpdate> ProjectNoFundingSourceIdentifiedUpdates { get { return AllProjectNoFundingSourceIdentifiedUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectNote> AllProjectNotes { get; set; }
        public virtual IQueryable<ProjectNote> ProjectNotes { get { return AllProjectNotes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectNoteUpdate> AllProjectNoteUpdates { get; set; }
        public virtual IQueryable<ProjectNoteUpdate> ProjectNoteUpdates { get { return AllProjectNoteUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectOrganization> AllProjectOrganizations { get; set; }
        public virtual IQueryable<ProjectOrganization> ProjectOrganizations { get { return AllProjectOrganizations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectOrganizationUpdate> AllProjectOrganizationUpdates { get; set; }
        public virtual IQueryable<ProjectOrganizationUpdate> ProjectOrganizationUpdates { get { return AllProjectOrganizationUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectProjectStatus> AllProjectProjectStatuses { get; set; }
        public virtual IQueryable<ProjectProjectStatus> ProjectProjectStatuses { get { return AllProjectProjectStatuses.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectRelevantCostType> AllProjectRelevantCostTypes { get; set; }
        public virtual IQueryable<ProjectRelevantCostType> ProjectRelevantCostTypes { get { return AllProjectRelevantCostTypes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectRelevantCostTypeUpdate> AllProjectRelevantCostTypeUpdates { get; set; }
        public virtual IQueryable<ProjectRelevantCostTypeUpdate> ProjectRelevantCostTypeUpdates { get { return AllProjectRelevantCostTypeUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Project> AllProjects { get; set; }
        public virtual IQueryable<Project> Projects { get { return AllProjects.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectStageCustomLabel> AllProjectStageCustomLabels { get; set; }
        public virtual IQueryable<ProjectStageCustomLabel> ProjectStageCustomLabels { get { return AllProjectStageCustomLabels.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectStatus> AllProjectStatuses { get; set; }
        public virtual IQueryable<ProjectStatus> ProjectStatuses { get { return AllProjectStatuses.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectTag> AllProjectTags { get; set; }
        public virtual IQueryable<ProjectTag> ProjectTags { get { return AllProjectTags.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectUpdateBatchClassificationSystem> AllProjectUpdateBatchClassificationSystems { get; set; }
        public virtual IQueryable<ProjectUpdateBatchClassificationSystem> ProjectUpdateBatchClassificationSystems { get { return AllProjectUpdateBatchClassificationSystems.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectUpdateBatch> AllProjectUpdateBatches { get; set; }
        public virtual IQueryable<ProjectUpdateBatch> ProjectUpdateBatches { get { return AllProjectUpdateBatches.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectUpdateHistory> AllProjectUpdateHistories { get; set; }
        public virtual IQueryable<ProjectUpdateHistory> ProjectUpdateHistories { get { return AllProjectUpdateHistories.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectUpdate> AllProjectUpdates { get; set; }
        public virtual IQueryable<ProjectUpdate> ProjectUpdates { get { return AllProjectUpdates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ProjectUpdateSetting> AllProjectUpdateSettings { get; set; }
        public virtual IQueryable<ProjectUpdateSetting> ProjectUpdateSettings { get { return AllProjectUpdateSettings.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<ReleaseNote> ReleaseNotes { get; set; }
        public virtual DbSet<ReportTemplate> AllReportTemplates { get; set; }
        public virtual IQueryable<ReportTemplate> ReportTemplates { get { return AllReportTemplates.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<SecondaryProjectTaxonomyLeaf> AllSecondaryProjectTaxonomyLeafs { get; set; }
        public virtual IQueryable<SecondaryProjectTaxonomyLeaf> SecondaryProjectTaxonomyLeafs { get { return AllSecondaryProjectTaxonomyLeafs.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Solicitation> AllSolicitations { get; set; }
        public virtual IQueryable<Solicitation> Solicitations { get { return AllSolicitations.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<StateProvince> AllStateProvinces { get; set; }
        public virtual IQueryable<StateProvince> StateProvinces { get { return AllStateProvinces.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<SupportRequestLog> AllSupportRequestLogs { get; set; }
        public virtual IQueryable<SupportRequestLog> SupportRequestLogs { get { return AllSupportRequestLogs.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<Tag> AllTags { get; set; }
        public virtual IQueryable<Tag> Tags { get { return AllTags.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TaxonomyBranch> AllTaxonomyBranches { get; set; }
        public virtual IQueryable<TaxonomyBranch> TaxonomyBranches { get { return AllTaxonomyBranches.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TaxonomyLeafPerformanceMeasure> AllTaxonomyLeafPerformanceMeasures { get; set; }
        public virtual IQueryable<TaxonomyLeafPerformanceMeasure> TaxonomyLeafPerformanceMeasures { get { return AllTaxonomyLeafPerformanceMeasures.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TaxonomyLeaf> AllTaxonomyLeafs { get; set; }
        public virtual IQueryable<TaxonomyLeaf> TaxonomyLeafs { get { return AllTaxonomyLeafs.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TaxonomyTrunk> AllTaxonomyTrunks { get; set; }
        public virtual IQueryable<TaxonomyTrunk> TaxonomyTrunks { get { return AllTaxonomyTrunks.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TenantAttribute> AllTenantAttributes { get; set; }
        public virtual IQueryable<TenantAttribute> TenantAttributes { get { return AllTenantAttributes.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TrainingVideoRole> AllTrainingVideoRoles { get; set; }
        public virtual IQueryable<TrainingVideoRole> TrainingVideoRoles { get { return AllTrainingVideoRoles.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<TrainingVideo> AllTrainingVideos { get; set; }
        public virtual IQueryable<TrainingVideo> TrainingVideos { get { return AllTrainingVideos.Where(x => x.TenantID == TenantID); } }
        public virtual DbSet<vGeoServerGeospatialArea> vGeoServerGeospatialAreas { get; set; }
        public virtual DbSet<vGeoServerProjectDetailedLocations> vGeoServerProjectDetailedLocations { get; set; }
        public virtual DbSet<vGeoServerProjectSimpleLocations> vGeoServerProjectSimpleLocations { get; set; }
        public virtual DbSet<vGeospatialArea> vGeospatialAreas { get; set; }
        public virtual DbSet<vProjectAttachment> vProjectAttachments { get; set; }
        public virtual DbSet<vProjectCustomAttributeValue> vProjectCustomAttributeValues { get; set; }
        public virtual DbSet<vProjectDetail> vProjectDetails { get; set; }
        public virtual DbSet<vProjectFunctionallyComplete> vProjectFunctionallyCompletes { get; set; }
        public virtual DbSet<fGeoServerGeospatialAreaAreasContainingProjectLocation_Result> fGeoServerGeospatialAreaAreasContainingProjectLocationResults { get; set; }

        [DbFunction("DatabaseEntities", "fGeoServerGeospatialAreaAreasContainingProjectLocation")]
        public virtual IQueryable<fGeoServerGeospatialAreaAreasContainingProjectLocation_Result> GetfGeoServerGeospatialAreaAreasContainingProjectLocations(int? piProjectIDParameter, bool? pbIsProjectParameter, int? piGeospatialAreaTypeIDParameter)
        {
            
            var piProjectID = new System.Data.Entity.Core.Objects.ObjectParameter("piProjectID", typeof(int?))
            {
                Value = piProjectIDParameter
            };

            var pbIsProject = new System.Data.Entity.Core.Objects.ObjectParameter("pbIsProject", typeof(bool?))
            {
                Value = pbIsProjectParameter
            };

            var piGeospatialAreaTypeID = new System.Data.Entity.Core.Objects.ObjectParameter("piGeospatialAreaTypeID", typeof(int?))
            {
                Value = piGeospatialAreaTypeIDParameter
            };
            return (this as System.Data.Entity.Infrastructure.IObjectContextAdapter).ObjectContext
                  .CreateQuery<fGeoServerGeospatialAreaAreasContainingProjectLocation_Result>("DatabaseEntities.fGeoServerGeospatialAreaAreasContainingProjectLocation(@piProjectID, @pbIsProject, @piGeospatialAreaTypeID)",piProjectID, pbIsProject, piGeospatialAreaTypeID);
        }

        public object LoadType(Type type, int primaryKey)
        {
            switch (type.Name)
            {
                case "AccomplishmentsDashboardFundingDisplayType":
                    var accomplishmentsDashboardFundingDisplayType = AccomplishmentsDashboardFundingDisplayType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(accomplishmentsDashboardFundingDisplayType, "AccomplishmentsDashboardFundingDisplayType", primaryKey);
                    return accomplishmentsDashboardFundingDisplayType;

                case "AssessmentGoal":
                    return AssessmentGoals.GetAssessmentGoal(primaryKey);

                case "AssessmentQuestion":
                    return AssessmentQuestions.GetAssessmentQuestion(primaryKey);

                case "AssessmentSubGoal":
                    return AssessmentSubGoals.GetAssessmentSubGoal(primaryKey);

                case "AttachmentTypeFileResourceMimeType":
                    return AttachmentTypeFileResourceMimeTypes.GetAttachmentTypeFileResourceMimeType(primaryKey);

                case "AttachmentTypeRole":
                    return AttachmentTypeRoles.GetAttachmentTypeRole(primaryKey);

                case "AttachmentType":
                    return AttachmentTypes.GetAttachmentType(primaryKey);

                case "AttachmentTypeTaxonomyTrunk":
                    return AttachmentTypeTaxonomyTrunks.GetAttachmentTypeTaxonomyTrunk(primaryKey);

                case "AuditLogEventType":
                    var auditLogEventType = AuditLogEventType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(auditLogEventType, "AuditLogEventType", primaryKey);
                    return auditLogEventType;

                case "AuditLog":
                    return AuditLogs.GetAuditLog(primaryKey);

                case "BudgetType":
                    var budgetType = BudgetType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(budgetType, "BudgetType", primaryKey);
                    return budgetType;

                case "ClassificationPerformanceMeasure":
                    return ClassificationPerformanceMeasures.GetClassificationPerformanceMeasure(primaryKey);

                case "Classification":
                    return Classifications.GetClassification(primaryKey);

                case "ClassificationSystem":
                    return ClassificationSystems.GetClassificationSystem(primaryKey);

                case "ContactRelationshipType":
                    return ContactRelationshipTypes.GetContactRelationshipType(primaryKey);

                case "CostType":
                    return CostTypes.GetCostType(primaryKey);

                case "County":
                    return Counties.GetCounty(primaryKey);

                case "CustomPageImage":
                    return CustomPageImages.GetCustomPageImage(primaryKey);

                case "CustomPageRole":
                    return CustomPageRoles.GetCustomPageRole(primaryKey);

                case "CustomPage":
                    return CustomPages.GetCustomPage(primaryKey);

                case "DocumentCategory":
                    var documentCategory = DocumentCategory.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(documentCategory, "DocumentCategory", primaryKey);
                    return documentCategory;

                case "DocumentLibrary":
                    return DocumentLibraries.GetDocumentLibrary(primaryKey);

                case "DocumentLibraryDocumentCategory":
                    return DocumentLibraryDocumentCategories.GetDocumentLibraryDocumentCategory(primaryKey);

                case "DocumentLibraryDocumentRole":
                    return DocumentLibraryDocumentRoles.GetDocumentLibraryDocumentRole(primaryKey);

                case "DocumentLibraryDocument":
                    return DocumentLibraryDocuments.GetDocumentLibraryDocument(primaryKey);

                case "EvaluationCriteria":
                    return EvaluationCriterias.GetEvaluationCriteria(primaryKey);

                case "EvaluationCriteriaValue":
                    return EvaluationCriteriaValues.GetEvaluationCriteriaValue(primaryKey);

                case "Evaluation":
                    return Evaluations.GetEvaluation(primaryKey);

                case "EvaluationStatus":
                    var evaluationStatus = EvaluationStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(evaluationStatus, "EvaluationStatus", primaryKey);
                    return evaluationStatus;

                case "EvaluationVisibility":
                    var evaluationVisibility = EvaluationVisibility.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(evaluationVisibility, "EvaluationVisibility", primaryKey);
                    return evaluationVisibility;

                case "ExternalMapLayer":
                    return ExternalMapLayers.GetExternalMapLayer(primaryKey);

                case "FieldDefinitionDataImage":
                    return FieldDefinitionDataImages.GetFieldDefinitionDataImage(primaryKey);

                case "FieldDefinitionData":
                    return FieldDefinitionDatas.GetFieldDefinitionData(primaryKey);

                case "FieldDefinitionDefault":
                    return FieldDefinitionDefaults.GetFieldDefinitionDefault(primaryKey);

                case "FieldDefinition":
                    return FieldDefinitions.GetFieldDefinition(primaryKey);

                case "FileResourceData":
                    return FileResourceDatas.GetFileResourceData(primaryKey);

                case "FileResourceInfo":
                    return FileResourceInfos.GetFileResourceInfo(primaryKey);

                case "FileResourceMimeType":
                    var fileResourceMimeType = FileResourceMimeType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fileResourceMimeType, "FileResourceMimeType", primaryKey);
                    return fileResourceMimeType;

                case "FirmaHomePageImage":
                    return FirmaHomePageImages.GetFirmaHomePageImage(primaryKey);

                case "FirmaMenuItem":
                    var firmaMenuItem = FirmaMenuItem.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(firmaMenuItem, "FirmaMenuItem", primaryKey);
                    return firmaMenuItem;

                case "FirmaPageImage":
                    return FirmaPageImages.GetFirmaPageImage(primaryKey);

                case "FirmaPageRenderType":
                    var firmaPageRenderType = FirmaPageRenderType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(firmaPageRenderType, "FirmaPageRenderType", primaryKey);
                    return firmaPageRenderType;

                case "FirmaPage":
                    return FirmaPages.GetFirmaPage(primaryKey);

                case "FirmaPageType":
                    return FirmaPageTypes.GetFirmaPageType(primaryKey);

                case "FirmaSession":
                    return FirmaSessions.GetFirmaSession(primaryKey);

                case "FirmaSystemAuthenticationType":
                    var firmaSystemAuthenticationType = FirmaSystemAuthenticationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(firmaSystemAuthenticationType, "FirmaSystemAuthenticationType", primaryKey);
                    return firmaSystemAuthenticationType;

                case "FundingSourceCustomAttributeDataType":
                    var fundingSourceCustomAttributeDataType = FundingSourceCustomAttributeDataType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fundingSourceCustomAttributeDataType, "FundingSourceCustomAttributeDataType", primaryKey);
                    return fundingSourceCustomAttributeDataType;

                case "FundingSourceCustomAttribute":
                    return FundingSourceCustomAttributes.GetFundingSourceCustomAttribute(primaryKey);

                case "FundingSourceCustomAttributeTypeRolePermissionType":
                    var fundingSourceCustomAttributeTypeRolePermissionType = FundingSourceCustomAttributeTypeRolePermissionType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fundingSourceCustomAttributeTypeRolePermissionType, "FundingSourceCustomAttributeTypeRolePermissionType", primaryKey);
                    return fundingSourceCustomAttributeTypeRolePermissionType;

                case "FundingSourceCustomAttributeTypeRole":
                    return FundingSourceCustomAttributeTypeRoles.GetFundingSourceCustomAttributeTypeRole(primaryKey);

                case "FundingSourceCustomAttributeType":
                    return FundingSourceCustomAttributeTypes.GetFundingSourceCustomAttributeType(primaryKey);

                case "FundingSourceCustomAttributeValue":
                    return FundingSourceCustomAttributeValues.GetFundingSourceCustomAttributeValue(primaryKey);

                case "FundingSource":
                    return FundingSources.GetFundingSource(primaryKey);

                case "FundingType":
                    var fundingType = FundingType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(fundingType, "FundingType", primaryKey);
                    return fundingType;

                case "GeospatialAreaImage":
                    return GeospatialAreaImages.GetGeospatialAreaImage(primaryKey);

                case "GeospatialAreaPerformanceMeasureFixedTarget":
                    return GeospatialAreaPerformanceMeasureFixedTargets.GetGeospatialAreaPerformanceMeasureFixedTarget(primaryKey);

                case "GeospatialAreaPerformanceMeasureNoTarget":
                    return GeospatialAreaPerformanceMeasureNoTargets.GetGeospatialAreaPerformanceMeasureNoTarget(primaryKey);

                case "GeospatialAreaPerformanceMeasureReportingPeriodTarget":
                    return GeospatialAreaPerformanceMeasureReportingPeriodTargets.GetGeospatialAreaPerformanceMeasureReportingPeriodTarget(primaryKey);

                case "GeospatialAreaRawData":
                    return GeospatialAreaRawDatas.GetGeospatialAreaRawData(primaryKey);

                case "GeospatialArea":
                    return GeospatialAreas.GetGeospatialArea(primaryKey);

                case "GeospatialAreaStaging":
                    return GeospatialAreaStagings.GetGeospatialAreaStaging(primaryKey);

                case "GeospatialAreaType":
                    return GeospatialAreaTypes.GetGeospatialAreaType(primaryKey);

                case "GoogleChartType":
                    var googleChartType = GoogleChartType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(googleChartType, "GoogleChartType", primaryKey);
                    return googleChartType;

                case "ImportExternalProjectStaging":
                    return ImportExternalProjectStagings.GetImportExternalProjectStaging(primaryKey);

                case "LastSQLServerDatabaseBackup":
                    return LastSQLServerDatabaseBackups.GetLastSQLServerDatabaseBackup(primaryKey);

                case "MatchMakerAreaOfInterestLocation":
                    return MatchMakerAreaOfInterestLocations.GetMatchMakerAreaOfInterestLocation(primaryKey);

                case "MatchmakerKeyword":
                    return MatchmakerKeywords.GetMatchmakerKeyword(primaryKey);

                case "MatchmakerOrganizationClassification":
                    return MatchmakerOrganizationClassifications.GetMatchmakerOrganizationClassification(primaryKey);

                case "MatchmakerOrganizationPerformanceMeasure":
                    return MatchmakerOrganizationPerformanceMeasures.GetMatchmakerOrganizationPerformanceMeasure(primaryKey);

                case "MatchmakerOrganizationTaxonomyBranch":
                    return MatchmakerOrganizationTaxonomyBranches.GetMatchmakerOrganizationTaxonomyBranch(primaryKey);

                case "MatchmakerOrganizationTaxonomyLeaf":
                    return MatchmakerOrganizationTaxonomyLeafs.GetMatchmakerOrganizationTaxonomyLeaf(primaryKey);

                case "MatchmakerOrganizationTaxonomyTrunk":
                    return MatchmakerOrganizationTaxonomyTrunks.GetMatchmakerOrganizationTaxonomyTrunk(primaryKey);

                case "MatchmakerSubScoreType":
                    var matchmakerSubScoreType = MatchmakerSubScoreType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(matchmakerSubScoreType, "MatchmakerSubScoreType", primaryKey);
                    return matchmakerSubScoreType;

                case "MeasurementUnitType":
                    var measurementUnitType = MeasurementUnitType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(measurementUnitType, "MeasurementUnitType", primaryKey);
                    return measurementUnitType;

                case "NotificationProject":
                    return NotificationProjects.GetNotificationProject(primaryKey);

                case "Notification":
                    return Notifications.GetNotification(primaryKey);

                case "NotificationType":
                    var notificationType = NotificationType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(notificationType, "NotificationType", primaryKey);
                    return notificationType;

                case "OrganizationBoundaryStaging":
                    return OrganizationBoundaryStagings.GetOrganizationBoundaryStaging(primaryKey);

                case "OrganizationImage":
                    return OrganizationImages.GetOrganizationImage(primaryKey);

                case "OrganizationMatchmakerKeyword":
                    return OrganizationMatchmakerKeywords.GetOrganizationMatchmakerKeyword(primaryKey);

                case "OrganizationRelationshipType":
                    return OrganizationRelationshipTypes.GetOrganizationRelationshipType(primaryKey);

                case "Organization":
                    return Organizations.GetOrganization(primaryKey);

                case "OrganizationTypeOrganizationRelationshipType":
                    return OrganizationTypeOrganizationRelationshipTypes.GetOrganizationTypeOrganizationRelationshipType(primaryKey);

                case "OrganizationType":
                    return OrganizationTypes.GetOrganizationType(primaryKey);

                case "Person":
                    return People.GetPerson(primaryKey);

                case "PerformanceMeasureActual":
                    return PerformanceMeasureActuals.GetPerformanceMeasureActual(primaryKey);

                case "PerformanceMeasureActualSubcategoryOption":
                    return PerformanceMeasureActualSubcategoryOptions.GetPerformanceMeasureActualSubcategoryOption(primaryKey);

                case "PerformanceMeasureActualSubcategoryOptionUpdate":
                    return PerformanceMeasureActualSubcategoryOptionUpdates.GetPerformanceMeasureActualSubcategoryOptionUpdate(primaryKey);

                case "PerformanceMeasureActualUpdate":
                    return PerformanceMeasureActualUpdates.GetPerformanceMeasureActualUpdate(primaryKey);

                case "PerformanceMeasureDataSourceType":
                    var performanceMeasureDataSourceType = PerformanceMeasureDataSourceType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(performanceMeasureDataSourceType, "PerformanceMeasureDataSourceType", primaryKey);
                    return performanceMeasureDataSourceType;

                case "PerformanceMeasureExpected":
                    return PerformanceMeasureExpecteds.GetPerformanceMeasureExpected(primaryKey);

                case "PerformanceMeasureExpectedSubcategoryOption":
                    return PerformanceMeasureExpectedSubcategoryOptions.GetPerformanceMeasureExpectedSubcategoryOption(primaryKey);

                case "PerformanceMeasureExpectedSubcategoryOptionUpdate":
                    return PerformanceMeasureExpectedSubcategoryOptionUpdates.GetPerformanceMeasureExpectedSubcategoryOptionUpdate(primaryKey);

                case "PerformanceMeasureExpectedUpdate":
                    return PerformanceMeasureExpectedUpdates.GetPerformanceMeasureExpectedUpdate(primaryKey);

                case "PerformanceMeasureFixedTarget":
                    return PerformanceMeasureFixedTargets.GetPerformanceMeasureFixedTarget(primaryKey);

                case "PerformanceMeasureGroup":
                    return PerformanceMeasureGroups.GetPerformanceMeasureGroup(primaryKey);

                case "PerformanceMeasureImage":
                    return PerformanceMeasureImages.GetPerformanceMeasureImage(primaryKey);

                case "PerformanceMeasureNote":
                    return PerformanceMeasureNotes.GetPerformanceMeasureNote(primaryKey);

                case "PerformanceMeasureReportingPeriod":
                    return PerformanceMeasureReportingPeriods.GetPerformanceMeasureReportingPeriod(primaryKey);

                case "PerformanceMeasureReportingPeriodTarget":
                    return PerformanceMeasureReportingPeriodTargets.GetPerformanceMeasureReportingPeriodTarget(primaryKey);

                case "PerformanceMeasure":
                    return PerformanceMeasures.GetPerformanceMeasure(primaryKey);

                case "PerformanceMeasureSubcategory":
                    return PerformanceMeasureSubcategories.GetPerformanceMeasureSubcategory(primaryKey);

                case "PerformanceMeasureSubcategoryOption":
                    return PerformanceMeasureSubcategoryOptions.GetPerformanceMeasureSubcategoryOption(primaryKey);

                case "PerformanceMeasureTargetValueType":
                    var performanceMeasureTargetValueType = PerformanceMeasureTargetValueType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(performanceMeasureTargetValueType, "PerformanceMeasureTargetValueType", primaryKey);
                    return performanceMeasureTargetValueType;

                case "PerformanceMeasureType":
                    var performanceMeasureType = PerformanceMeasureType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(performanceMeasureType, "PerformanceMeasureType", primaryKey);
                    return performanceMeasureType;

                case "PersonLoginAccount":
                    return PersonLoginAccounts.GetPersonLoginAccount(primaryKey);

                case "PersonSettingGridColumn":
                    return PersonSettingGridColumns.GetPersonSettingGridColumn(primaryKey);

                case "PersonSettingGridColumnSettingFilter":
                    return PersonSettingGridColumnSettingFilters.GetPersonSettingGridColumnSettingFilter(primaryKey);

                case "PersonSettingGridColumnSetting":
                    return PersonSettingGridColumnSettings.GetPersonSettingGridColumnSetting(primaryKey);

                case "PersonSettingGridTable":
                    return PersonSettingGridTables.GetPersonSettingGridTable(primaryKey);

                case "PersonStewardGeospatialArea":
                    return PersonStewardGeospatialAreas.GetPersonStewardGeospatialArea(primaryKey);

                case "PersonStewardOrganization":
                    return PersonStewardOrganizations.GetPersonStewardOrganization(primaryKey);

                case "PersonStewardTaxonomyBranch":
                    return PersonStewardTaxonomyBranches.GetPersonStewardTaxonomyBranch(primaryKey);

                case "ProjectApprovalStatus":
                    var projectApprovalStatus = ProjectApprovalStatus.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectApprovalStatus, "ProjectApprovalStatus", primaryKey);
                    return projectApprovalStatus;

                case "ProjectAssessmentQuestion":
                    return ProjectAssessmentQuestions.GetProjectAssessmentQuestion(primaryKey);

                case "ProjectAttachment":
                    return ProjectAttachments.GetProjectAttachment(primaryKey);

                case "ProjectAttachmentUpdate":
                    return ProjectAttachmentUpdates.GetProjectAttachmentUpdate(primaryKey);

                case "ProjectCategory":
                    var projectCategory = ProjectCategory.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCategory, "ProjectCategory", primaryKey);
                    return projectCategory;

                case "ProjectClassification":
                    return ProjectClassifications.GetProjectClassification(primaryKey);

                case "ProjectClassificationUpdate":
                    return ProjectClassificationUpdates.GetProjectClassificationUpdate(primaryKey);

                case "ProjectColorByType":
                    var projectColorByType = ProjectColorByType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectColorByType, "ProjectColorByType", primaryKey);
                    return projectColorByType;

                case "ProjectContact":
                    return ProjectContacts.GetProjectContact(primaryKey);

                case "ProjectContactUpdate":
                    return ProjectContactUpdates.GetProjectContactUpdate(primaryKey);

                case "ProjectCreateSection":
                    var projectCreateSection = ProjectCreateSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCreateSection, "ProjectCreateSection", primaryKey);
                    return projectCreateSection;

                case "ProjectCustomAttributeDataType":
                    var projectCustomAttributeDataType = ProjectCustomAttributeDataType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCustomAttributeDataType, "ProjectCustomAttributeDataType", primaryKey);
                    return projectCustomAttributeDataType;

                case "ProjectCustomAttributeGroupProjectCategory":
                    return ProjectCustomAttributeGroupProjectCategories.GetProjectCustomAttributeGroupProjectCategory(primaryKey);

                case "ProjectCustomAttributeGroup":
                    return ProjectCustomAttributeGroups.GetProjectCustomAttributeGroup(primaryKey);

                case "ProjectCustomAttribute":
                    return ProjectCustomAttributes.GetProjectCustomAttribute(primaryKey);

                case "ProjectCustomAttributeTypeRolePermissionType":
                    var projectCustomAttributeTypeRolePermissionType = ProjectCustomAttributeTypeRolePermissionType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCustomAttributeTypeRolePermissionType, "ProjectCustomAttributeTypeRolePermissionType", primaryKey);
                    return projectCustomAttributeTypeRolePermissionType;

                case "ProjectCustomAttributeTypeRole":
                    return ProjectCustomAttributeTypeRoles.GetProjectCustomAttributeTypeRole(primaryKey);

                case "ProjectCustomAttributeType":
                    return ProjectCustomAttributeTypes.GetProjectCustomAttributeType(primaryKey);

                case "ProjectCustomAttributeUpdate":
                    return ProjectCustomAttributeUpdates.GetProjectCustomAttributeUpdate(primaryKey);

                case "ProjectCustomAttributeUpdateValue":
                    return ProjectCustomAttributeUpdateValues.GetProjectCustomAttributeUpdateValue(primaryKey);

                case "ProjectCustomAttributeValue":
                    return ProjectCustomAttributeValues.GetProjectCustomAttributeValue(primaryKey);

                case "ProjectCustomGridColumn":
                    var projectCustomGridColumn = ProjectCustomGridColumn.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCustomGridColumn, "ProjectCustomGridColumn", primaryKey);
                    return projectCustomGridColumn;

                case "ProjectCustomGridConfiguration":
                    return ProjectCustomGridConfigurations.GetProjectCustomGridConfiguration(primaryKey);

                case "ProjectCustomGridType":
                    var projectCustomGridType = ProjectCustomGridType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectCustomGridType, "ProjectCustomGridType", primaryKey);
                    return projectCustomGridType;

                case "ProjectEvaluation":
                    return ProjectEvaluations.GetProjectEvaluation(primaryKey);

                case "ProjectEvaluationSelectedValue":
                    return ProjectEvaluationSelectedValues.GetProjectEvaluationSelectedValue(primaryKey);

                case "ProjectExemptReportingType":
                    var projectExemptReportingType = ProjectExemptReportingType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectExemptReportingType, "ProjectExemptReportingType", primaryKey);
                    return projectExemptReportingType;

                case "ProjectExemptReportingYear":
                    return ProjectExemptReportingYears.GetProjectExemptReportingYear(primaryKey);

                case "ProjectExemptReportingYearUpdate":
                    return ProjectExemptReportingYearUpdates.GetProjectExemptReportingYearUpdate(primaryKey);

                case "ProjectExternalLink":
                    return ProjectExternalLinks.GetProjectExternalLink(primaryKey);

                case "ProjectExternalLinkUpdate":
                    return ProjectExternalLinkUpdates.GetProjectExternalLinkUpdate(primaryKey);

                case "ProjectFundingSourceBudget":
                    return ProjectFundingSourceBudgets.GetProjectFundingSourceBudget(primaryKey);

                case "ProjectFundingSourceBudgetUpdate":
                    return ProjectFundingSourceBudgetUpdates.GetProjectFundingSourceBudgetUpdate(primaryKey);

                case "ProjectFundingSourceExpenditure":
                    return ProjectFundingSourceExpenditures.GetProjectFundingSourceExpenditure(primaryKey);

                case "ProjectFundingSourceExpenditureUpdate":
                    return ProjectFundingSourceExpenditureUpdates.GetProjectFundingSourceExpenditureUpdate(primaryKey);

                case "ProjectGeospatialArea":
                    return ProjectGeospatialAreas.GetProjectGeospatialArea(primaryKey);

                case "ProjectGeospatialAreaTypeNote":
                    return ProjectGeospatialAreaTypeNotes.GetProjectGeospatialAreaTypeNote(primaryKey);

                case "ProjectGeospatialAreaTypeNoteUpdate":
                    return ProjectGeospatialAreaTypeNoteUpdates.GetProjectGeospatialAreaTypeNoteUpdate(primaryKey);

                case "ProjectGeospatialAreaUpdate":
                    return ProjectGeospatialAreaUpdates.GetProjectGeospatialAreaUpdate(primaryKey);

                case "ProjectImage":
                    return ProjectImages.GetProjectImage(primaryKey);

                case "ProjectImageTiming":
                    var projectImageTiming = ProjectImageTiming.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectImageTiming, "ProjectImageTiming", primaryKey);
                    return projectImageTiming;

                case "ProjectImageUpdate":
                    return ProjectImageUpdates.GetProjectImageUpdate(primaryKey);

                case "ProjectInternalNote":
                    return ProjectInternalNotes.GetProjectInternalNote(primaryKey);

                case "ProjectLocationFilterType":
                    var projectLocationFilterType = ProjectLocationFilterType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectLocationFilterType, "ProjectLocationFilterType", primaryKey);
                    return projectLocationFilterType;

                case "ProjectLocation":
                    return ProjectLocations.GetProjectLocation(primaryKey);

                case "ProjectLocationSimpleType":
                    var projectLocationSimpleType = ProjectLocationSimpleType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectLocationSimpleType, "ProjectLocationSimpleType", primaryKey);
                    return projectLocationSimpleType;

                case "ProjectLocationStaging":
                    return ProjectLocationStagings.GetProjectLocationStaging(primaryKey);

                case "ProjectLocationStagingUpdate":
                    return ProjectLocationStagingUpdates.GetProjectLocationStagingUpdate(primaryKey);

                case "ProjectLocationUpdate":
                    return ProjectLocationUpdates.GetProjectLocationUpdate(primaryKey);

                case "ProjectNoFundingSourceIdentified":
                    return ProjectNoFundingSourceIdentifieds.GetProjectNoFundingSourceIdentified(primaryKey);

                case "ProjectNoFundingSourceIdentifiedUpdate":
                    return ProjectNoFundingSourceIdentifiedUpdates.GetProjectNoFundingSourceIdentifiedUpdate(primaryKey);

                case "ProjectNote":
                    return ProjectNotes.GetProjectNote(primaryKey);

                case "ProjectNoteUpdate":
                    return ProjectNoteUpdates.GetProjectNoteUpdate(primaryKey);

                case "ProjectOrganization":
                    return ProjectOrganizations.GetProjectOrganization(primaryKey);

                case "ProjectOrganizationUpdate":
                    return ProjectOrganizationUpdates.GetProjectOrganizationUpdate(primaryKey);

                case "ProjectProjectStatus":
                    return ProjectProjectStatuses.GetProjectProjectStatus(primaryKey);

                case "ProjectRelevantCostTypeGroup":
                    var projectRelevantCostTypeGroup = ProjectRelevantCostTypeGroup.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectRelevantCostTypeGroup, "ProjectRelevantCostTypeGroup", primaryKey);
                    return projectRelevantCostTypeGroup;

                case "ProjectRelevantCostType":
                    return ProjectRelevantCostTypes.GetProjectRelevantCostType(primaryKey);

                case "ProjectRelevantCostTypeUpdate":
                    return ProjectRelevantCostTypeUpdates.GetProjectRelevantCostTypeUpdate(primaryKey);

                case "Project":
                    return Projects.GetProject(primaryKey);

                case "ProjectStageCustomLabel":
                    return ProjectStageCustomLabels.GetProjectStageCustomLabel(primaryKey);

                case "ProjectStage":
                    var projectStage = ProjectStage.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectStage, "ProjectStage", primaryKey);
                    return projectStage;

                case "ProjectStatus":
                    return ProjectStatuses.GetProjectStatus(primaryKey);

                case "ProjectStewardshipAreaType":
                    var projectStewardshipAreaType = ProjectStewardshipAreaType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectStewardshipAreaType, "ProjectStewardshipAreaType", primaryKey);
                    return projectStewardshipAreaType;

                case "ProjectTag":
                    return ProjectTags.GetProjectTag(primaryKey);

                case "ProjectUpdateBatchClassificationSystem":
                    return ProjectUpdateBatchClassificationSystems.GetProjectUpdateBatchClassificationSystem(primaryKey);

                case "ProjectUpdateBatch":
                    return ProjectUpdateBatches.GetProjectUpdateBatch(primaryKey);

                case "ProjectUpdateHistory":
                    return ProjectUpdateHistories.GetProjectUpdateHistory(primaryKey);

                case "ProjectUpdate":
                    return ProjectUpdates.GetProjectUpdate(primaryKey);

                case "ProjectUpdateSection":
                    var projectUpdateSection = ProjectUpdateSection.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectUpdateSection, "ProjectUpdateSection", primaryKey);
                    return projectUpdateSection;

                case "ProjectUpdateSetting":
                    return ProjectUpdateSettings.GetProjectUpdateSetting(primaryKey);

                case "ProjectUpdateState":
                    var projectUpdateState = ProjectUpdateState.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectUpdateState, "ProjectUpdateState", primaryKey);
                    return projectUpdateState;

                case "ProjectWorkflowSectionGrouping":
                    var projectWorkflowSectionGrouping = ProjectWorkflowSectionGrouping.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(projectWorkflowSectionGrouping, "ProjectWorkflowSectionGrouping", primaryKey);
                    return projectWorkflowSectionGrouping;

                case "ReleaseNote":
                    return ReleaseNotes.GetReleaseNote(primaryKey);

                case "ReportTemplateModel":
                    var reportTemplateModel = ReportTemplateModel.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(reportTemplateModel, "ReportTemplateModel", primaryKey);
                    return reportTemplateModel;

                case "ReportTemplateModelType":
                    var reportTemplateModelType = ReportTemplateModelType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(reportTemplateModelType, "ReportTemplateModelType", primaryKey);
                    return reportTemplateModelType;

                case "ReportTemplate":
                    return ReportTemplates.GetReportTemplate(primaryKey);

                case "Role":
                    var role = Role.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(role, "Role", primaryKey);
                    return role;

                case "SecondaryProjectTaxonomyLeaf":
                    return SecondaryProjectTaxonomyLeafs.GetSecondaryProjectTaxonomyLeaf(primaryKey);

                case "Solicitation":
                    return Solicitations.GetSolicitation(primaryKey);

                case "StateProvince":
                    return StateProvinces.GetStateProvince(primaryKey);

                case "SupportRequestLog":
                    return SupportRequestLogs.GetSupportRequestLog(primaryKey);

                case "SupportRequestType":
                    var supportRequestType = SupportRequestType.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(supportRequestType, "SupportRequestType", primaryKey);
                    return supportRequestType;

                case "Tag":
                    return Tags.GetTag(primaryKey);

                case "TaxonomyBranch":
                    return TaxonomyBranches.GetTaxonomyBranch(primaryKey);

                case "TaxonomyLeafPerformanceMeasure":
                    return TaxonomyLeafPerformanceMeasures.GetTaxonomyLeafPerformanceMeasure(primaryKey);

                case "TaxonomyLeaf":
                    return TaxonomyLeafs.GetTaxonomyLeaf(primaryKey);

                case "TaxonomyLevel":
                    var taxonomyLevel = TaxonomyLevel.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(taxonomyLevel, "TaxonomyLevel", primaryKey);
                    return taxonomyLevel;

                case "TaxonomyTrunk":
                    return TaxonomyTrunks.GetTaxonomyTrunk(primaryKey);

                case "TenantAttribute":
                    return TenantAttributes.GetTenantAttribute(primaryKey);

                case "Tenant":
                    var tenant = Tenant.All.SingleOrDefault(x => x.PrimaryKey == primaryKey);
                    Check.RequireNotNullThrowNotFound(tenant, "Tenant", primaryKey);
                    return tenant;

                case "TrainingVideoRole":
                    return TrainingVideoRoles.GetTrainingVideoRole(primaryKey);

                case "TrainingVideo":
                    return TrainingVideos.GetTrainingVideo(primaryKey);
                default:
                    throw new NotImplementedException(string.Format("No loader for type \"{0}\"", type.FullName));
            }
        }
    }
}