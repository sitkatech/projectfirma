@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Results

@inherits ConfigureAccomplishmentsDashboard



@using (Html.BeginForm())
{
<div class="form-group">
    @Html.LabelWithSugarFor(m => m.RelationshipTypetoIncludeID)
    <div class="help-block">The default option is to use the Accomplishments Dashboard to report for all Organizations that have a funding relationship (through expected or reported expenditures) with a project.</div>
    <div>
        @Html.DropDownListFor(m => m.RelationshipTypetoIncludeID, ViewDataTyped.RelationshipTypes, new Dictionary<string, object> { { "style", "width: auto" }, { "class", "form-control" } })
    </div>
</div>
<div class="form-group">
    @Html.LabelWithSugarFor(m => m.FundingDisplayTypeID)
    @foreach (var fundingDisplayType in ViewDataTyped.AccomplishmentsDashboardFundingDisplayTypes)
    {
        <div class="radio">
            <label>
                @Html.RadioButtonFor(m => m.FundingDisplayTypeID, fundingDisplayType.AccomplishmentsDashboardFundingDisplayTypeID)
                @fundingDisplayType.AccomplishmentsDashboardFundingDisplayTypeDisplayName
            </label>
        </div>
    }
    @Html.ValidationMessageFor(m => m.FundingDisplayTypeID)
</div>
    <div class="form-group">
        @Html.LabelWithSugarFor(m => m.IncludeReportingOrganizationType)
        <div class="help-block">When 'No' is selected, the organizations with the Project-Organization Relationship to a @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() above will NOT appear in the full list of partners, unless the list is filtered by a particular organization.</div>
        <div>
            <div class="radio-inline">
                <label>
                    @Html.RadioButtonFor(m => m.IncludeReportingOrganizationType, true)
                    Yes
                </label>
            </div>
            <div class="radio-inline">
                <label>
                    @Html.RadioButtonFor(m => m.IncludeReportingOrganizationType, false)
                    No
                </label>
            </div>
        </div>
        @Html.ValidationMessageFor(m => m.IncludeReportingOrganizationType)
    </div>
    <div class="form">
        <div class="form-group">
            @Html.LabelWithSugarFor(m => m.AccomplishmentsButtonTextHtmlString)
            @Html.TinyMCEEditorFor(m => m.AccomplishmentsButtonTextHtmlString, TinyMCEExtension.TinyMCEToolbarStyle.AllOnOneRowNoMaximize, true, true, null)
            @Html.ValidationMessageFor(m => m.AccomplishmentsButtonTextHtmlString)
        </div>
        <div class="form-group">
            @Html.LabelWithSugarFor(m => m.ExpendituresButtonTextHtmlString)
            @Html.TinyMCEEditorFor(m => m.ExpendituresButtonTextHtmlString, TinyMCEExtension.TinyMCEToolbarStyle.AllOnOneRowNoMaximize, true, true, null)
            @Html.ValidationMessageFor(m => m.ExpendituresButtonTextHtmlString)
        </div>
        <div class="form-group">
            @Html.LabelWithSugarFor(m => m.OrganizationsButtonTextHtmlString)
            @Html.TinyMCEEditorFor(m => m.OrganizationsButtonTextHtmlString, TinyMCEExtension.TinyMCEToolbarStyle.AllOnOneRowNoMaximize, true, true, null)
            @Html.ValidationMessageFor(m => m.OrganizationsButtonTextHtmlString)
        </div>
    </div>
}
