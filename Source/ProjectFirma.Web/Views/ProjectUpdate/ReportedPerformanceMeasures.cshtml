@*-----------------------------------------------------------------------
    <copyright file="PerformanceMeasures.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using System.Web.Mvc.Html
@using LtInfo.Common.DesignByContract
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Controllers
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common.ModalDialog
@using Microsoft.Web.Mvc
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.PerformanceMeasureControls
@inherits ReportedPerformanceMeasures

@{
    Check.Assert(ViewDataTyped.Project.ProjectStage != ProjectStage.PlanningDesign, string.Format("Performance Measures can't be edited for projects in the {0} stage.", ProjectStage.PlanningDesign.GetProjectStageDisplayName()));
}

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ReportedPerformanceMeasuresController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
                function() {
                    return {
                        AngularModel: @Html.Raw(JObject.FromObject(Model)),
                        AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                    };
                });

            jQuery(".selectpicker").selectpicker("refresh");
            jQuery(".modal").on("hidden.bs.modal",
                function () {
                    jQuery(".bootstrap-select.open").removeClass("open");
                });
      
            // ]]>
        </script>
    }
}

<p>
    To enter your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s annual accomplishments:
    <ul>
        <li>Select and add the appropriate @MultiTenantHelpers.GetPerformanceMeasureNamePluralized() to the list below.</li>
        <li>For each @MultiTenantHelpers.GetPerformanceMeasureName(), select the appropriate @FieldDefinitionEnum.PerformanceMeasureSubcategory.ToType().GetFieldDefinitionLabel() options and enter the accomplishment value.</li>
        <li>
            You must enter at least one @MultiTenantHelpers.GetPerformanceMeasureName() per year for the duration defined by your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s Start Year
            through the @Html.LinkWithFieldDefinitionFor(FieldDefinitionEnum.ReportingYear.ToType(), string.Format("current {0}", FieldDefinitionEnum.ReportingYear.ToType().GetFieldDefinitionLabel()), new List<string> { "fieldDefinitionLink" }).
            If you do not have accomplishments to report for a given year provide a brief explanation.
        </li>
    </ul>
    Click the <span class="helpicon glyphicon glyphicon-question-sign blue" title="Help"></span> icon to view reporting guidance
    on a specific @MultiTenantHelpers.GetPerformanceMeasureName(). You may review and update @MultiTenantHelpers.GetPerformanceMeasureNamePluralized() from previous years, and may add the
    same @MultiTenantHelpers.GetPerformanceMeasureName() multiple times.
</p>
<hr />
@if (!ViewDataTyped.IsEditable)
{
    if (ViewDataTyped.PerformanceMeasureReportedValuesSummaryViewData.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Any())
    {
        PerformanceMeasureReportedValuesSummary.RenderPartialView(Html, ViewDataTyped.PerformanceMeasureReportedValuesSummaryViewData);
    }
    else
    {
        <p class="systemText">No annual @MultiTenantHelpers.GetPerformanceMeasureName() accomplishments entered for this @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()).</p>
    }
}
else if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}
else
{
    <div class="row">
        <div class="col-xs-12">
            <div ng-app="ProjectFirmaApp" ng-controller="PerformanceMeasuresController">
                @if (Model.ProjectExemptReportingYearUpdates != null && Model.ProjectExemptReportingYearUpdates.Any())
                {
                    <div style="margin-top: 5px">
                        <a style="font-weight: bold; cursor: pointer" ng-click="AngularViewData.ShowExemptYears = !AngularViewData.ShowExemptYears">
                            <i ng-class="AngularViewData.ShowExemptYears ? 'glyphicon glyphicon-chevron-up' : 'glyphicon glyphicon-chevron-down'" ></i> 
                            What if my @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() has no accomplishments to report?
                        </a>
                        <div ng-show="AngularViewData.ShowExemptYears" >
                            Select the years for which you have no accomplishments to report and provide a brief explanation.
                            <div>
                                <label ng-repeat="projectExemptYearUpdate in AngularModel.ProjectExemptReportingYearUpdates" style="padding-right: 10px">
                                    <input type="checkbox" ng-model="projectExemptYearUpdate.IsExempt" /> <span ng-bind="projectExemptYearUpdate.CalendarYearDisplay"></span>
                                </label>
                            </div>
                            @Html.TextAreaFor(x => x.Explanation, new Dictionary<string, object> { { "style", "width:100%" }, { "placeholder", "Explanation here" }, { "ng-model", "AngularModel.Explanation" }, {"class", "form-control"} })
                            @Html.ValidationMessageFor(x => x.Explanation)
                        </div>
                    </div>
                    <hr />
                }
                <div class="form-group">
                    <label class="control-label">@MultiTenantHelpers.GetPerformanceMeasureName() to Add:</label>
                    <div class="input-group">                       
                        <select ng-model="PerformanceMeasureToAdd"
                                class="selectpicker"
                                data-live-search="true"
                                data-container="body"
                                title="Select a @MultiTenantHelpers.GetPerformanceMeasureName()"
                                data-width="100%">
                            <option value="" disabled selected>Select a @MultiTenantHelpers.GetPerformanceMeasureName()</option>
                            <option ng-repeat="performanceMeasure in filteredPerformanceMeasures()"
                                    value="{{performanceMeasure.PerformanceMeasureID}}"
                                    ng-selected="PerformanceMeasureToAdd == performanceMeasure.PerformanceMeasureID"
                                    ng-bind="performanceMeasure.DisplayName"
                                    data-tokens="{{performanceMeasure.DisplayName}}"></option>
                        </select>
                        <span class="input-group-btn">
                            <button class="btn btn-firma" type="button" ng-click="addRow()">
                                <span class="glyphicon glyphicon-plus"></span> Add
                            </button>
                        </span>
                    </div>
                </div>
                <br />
                @using (Html.BeginForm<ProjectUpdateController>(x => x.ReportedPerformanceMeasures(ViewDataTyped.Project, null), FormMethod.Post, new Dictionary<string, object> { { "name", "pmForm" }, { "novalidate", "novalidate" } }))
                {
                    <table class="table" ng-show="AngularModel.PerformanceMeasureActualUpdates.length > 0" ng-repeat="performanceMeasureGroup in groupedPerformanceMeasures()">
                        <thead>
                            <tr>
                                <th colspan="{{numberOfSubcategoryOptions(performanceMeasureGroup) + 4}}">
                                    <span class="helpicon glyphicon glyphicon-question-sign blue" title="Click to get more info on this @MultiTenantHelpers.GetPerformanceMeasureName()"
                                          ng-mouseover="performanceMeasureTooltip(performanceMeasureGroup)">                                            
                                    </span>
                                    <span ng-bind="getPerformanceMeasureName(performanceMeasureGroup)" style="font-weight: bold"></span>
                                </th>
                            </tr>
                            <tr>
                                <th></th>
                                <th>@Html.LabelWithRequiredTagFor(ViewDataTyped.ReportingYearLabel)</th>
                                <th ng-show="getPerformanceMeasure(performanceMeasureGroup.PerformanceMeasureID).HasRealSubcategories" ng-repeat="performanceMeasureActualSubcategoryOptionUpdate in performanceMeasureGroup.PerformanceMeasureActualSubcategoryOptionUpdates | orderBy:[getSubcategoryName]">{{getSubcategoryName(performanceMeasureActualSubcategoryOptionUpdate)}}</th>
                                <th>Value</th>
                                <th></th>
                            </tr>
                        </thead>
                        <tbody>
                            <tr ng-repeat="performanceMeasureActualUpdate in getGroupPerformanceMeasureActualUpdates(performanceMeasureGroup)" ng-form="pmActualValuesForm">
                                <td style="width: 50px">
                                    <span class="glyphicon glyphicon-warning-sign red" alt="Required information has not been completely provided (you can't submit this update)" ng-show="showRowValidationWarnings(performanceMeasureActualUpdate)"></span>
                                    <span class="glyphicon glyphicon-trash" title="Remove row" alt="Remove row" ng-click="deleteRow(performanceMeasureActualUpdate)" style="cursor: pointer"></span>
                                </td>
                                <td style="width: 120px">
                                    <select class="form-control"
                                            ng-model="performanceMeasureActualUpdate.CalendarYear" required>
                                        <option ng-repeat="calendarYearString in AngularViewData.CalendarYearStrings"
                                                value="{{calendarYearString.CalendarYear}}"
                                                ng-selected="calendarYearString.CalendarYear == performanceMeasureActualUpdate.CalendarYear">
                                            {{calendarYearString.CalendarYearDisplay}}
                                        </option>
                                    </select>
                                </td>
                                <td ng-show="getPerformanceMeasure(performanceMeasureActualUpdate.PerformanceMeasureID).HasRealSubcategories" ng-repeat="performanceMeasureActualSubcategoryOptionUpdate in performanceMeasureActualUpdate.PerformanceMeasureActualSubcategoryOptionUpdates | orderBy:[getSubcategoryName]">
                                    <select class="form-control"
                                            ng-model="performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureSubcategoryOptionID">
                                        <option ng-repeat="performanceMeasureSubcategoryOption in getSubcategoryOptionsForSubcategory(performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureSubcategoryID)"
                                                value="{{performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionID}}"
                                                ng-selected="performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureSubcategoryOptionID == performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionID">
                                            {{performanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionName}}
                                        </option>
                                    </select>
                                </td>
                                <td style="width: 100px">
                                    <input class="form-control" style="text-align: right"
                                           ng-model="performanceMeasureActualUpdate.ActualValue" ng-number/>
                                </td>
                                <td style="vertical-align: middle; padding-left: 0">
                                    {{getMeasurementUnitTypeDisplayName(performanceMeasureActualUpdate)}}
                                </td>
                            </tr>
                            <tr>
                                <td colspan="{{numberOfSubcategoryOptions(performanceMeasureGroup) + 4}}" class="text-right">
                                    <button class="btn btn-xs btn-firma" type="button" ng-click="addPerformanceMeasureToGroup(performanceMeasureGroup)">
                                        <span class="glyphicon glyphicon-plus"></span> Add a Row
                                    </button>
                                </td>
                            </tr>
                        </tbody>
                    </table>
                    <div ng-repeat="performanceMeasureActualUpdate in AngularModel.PerformanceMeasureActualUpdates | orderBy:'PerformanceMeasureID'">
                        <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].ActualValue).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActualUpdate.ActualValue}}">
                        <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActualUpdate.CalendarYear}}">
                        <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].PerformanceMeasureActualUpdateID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActualUpdate.PerformanceMeasureActualUpdateID}}">
                        <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].ProjectUpdateBatchID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActualUpdate.ProjectUpdateBatchID}}">
                        <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].PerformanceMeasureID).ToString().Replace("0", "{{$index}}")" value="{{performanceMeasureActualUpdate.PerformanceMeasureID}}">
                        
                        <div ng-repeat="performanceMeasureActualSubcategoryOptionUpdate in getSubcategoryOptionsSelected(performanceMeasureActualUpdate)">
                            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].PerformanceMeasureActualSubcategoryOptionUpdates[1].PerformanceMeasureSubcategoryOptionID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureSubcategoryOptionID}}">
                            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].PerformanceMeasureActualSubcategoryOptionUpdates[1].PerformanceMeasureSubcategoryID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureSubcategoryID}}">
                            <input type="hidden" name="@Html.NameFor(x => x.PerformanceMeasureActualUpdates[0].PerformanceMeasureActualSubcategoryOptionUpdates[1].PerformanceMeasureID).ToString().Replace("0", "{{$parent.$index}}").Replace("1", "{{$index}}")" value="{{performanceMeasureActualSubcategoryOptionUpdate.PerformanceMeasureID}}">
                        </div>
                    </div>
                    <div ng-repeat="projectExemptYearUpdate in AngularModel.ProjectExemptReportingYearUpdates">
                        <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYearUpdates[0].CalendarYear).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYearUpdate.CalendarYear}}" />
                        <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYearUpdates[0].CalendarYearDisplay).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYearUpdate.CalendarYearDisplay}}" />
                        <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYearUpdates[0].ProjectUpdateBatchID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYearUpdate.ProjectUpdateBatchID}}" />
                        <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYearUpdates[0].ProjectExemptReportingYearUpdateID).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYearUpdate.ProjectExemptReportingYearUpdateID}}" />
                        <input type="hidden" name="@Html.NameFor(x => x.ProjectExemptReportingYearUpdates[0].IsExempt).ToString().Replace("0", "{{$index}}")" value="{{projectExemptYearUpdate.IsExempt}}" />
                    </div>
                    <input type="hidden" name="@Html.NameFor(x => x.Explanation)" value="{{AngularModel.Explanation}}" />

                    if (ViewDataTyped.ShowApproveAndReturnButton)
                    {
                        <hr />
                        <div class="row form-group">
                            <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                            <div class="col-md-9">
                                @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> { { "style", "width: 100%" }, { "class", "form-control" } })
                            </div>
                        </div>
                    }
                    <hr />
                    SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData);
                    
                    <div class="row">
                        <div class="col-xs-6">
                            @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                            @if (ViewDataTyped.ProjectUpdateStatus.IsReportedPerformanceMeasuresUpdated)
                            {
                                @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0}", MultiTenantHelpers.GetPerformanceMeasureNamePluralized()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                            }
                        </div>
                        <div class="pull-right">
                            <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                            <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                        </div>
                    </div>
                    
                }

            </div>
        </div>
    </div>

    <script type="text/javascript">
        //<![CDATA[
        jQuery(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
        // ]]>
    </script>
}
