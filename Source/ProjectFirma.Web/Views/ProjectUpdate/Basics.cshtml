@*-----------------------------------------------------------------------
<copyright file="Basics.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Views
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits Basics

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable)
    {
        <script type="text/javascript">
            // <![CDATA[
            jQuery(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
            // ]]>
        </script>
    }
}

<div class="row">
    <div class="col-xs-12">
        <p>
            Update your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()’s basic information here. If this @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() is complete, be sure to set the stage to "@ProjectStage.Completed.GetProjectStageDisplayName()" or "@ProjectStage.PostImplementation.GetProjectStageDisplayName()"
            from the @FieldDefinitionEnum.ProjectStage.ToType().GetFieldDefinitionLabel() dropdown. Changes made here will not take effect until a review approves your updates.
        </p>
    </div>
</div>
<hr />
@using (Html.BeginForm())
{
<div class="form-horizontal">
    <div class="row form-group form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(m => m.ProjectDescription, true)
        </div>
        <div class="col-sm-8" style="padding-left: 10px;">
            @if (ViewDataTyped.IsEditable)
            {
                @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 6), null, new List<string> { "form-control" })
                @Html.ValidationMessageFor(m => m.ProjectDescription)
            }
            else
            {
                <div style="width: 464px">
                    @Html.Raw(ViewDataTyped.ProjectUpdate.ProjectDescription.HtmlEncodeWithBreaks())
                </div>
            }
        </div>
    </div>
    <div class="row form-group form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(m => m.ProjectStageID, true)
        </div>
        <div class="col-sm-8" style="padding-left: 10px;">
            @if (ViewDataTyped.IsEditable)
            {
                @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                @Html.ValidationMessageFor(m => m.ProjectStageID)
            }
            else
            {
                @ViewDataTyped.ProjectUpdate.ProjectStage.GetProjectStageDisplayName()
            }
            <div>
                <p class="systemText">To change the @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() stage to a stage not listed, @ModalDialogFormHelper.ModalDialogFormLink("contact support", ViewDataTyped.RequestSupportUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null).</p>
            </div>
        </div>
    </div>
    <div class="form-group form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(m => m.PlanningDesignStartYear)
        </div>
        <div class="col-sm-8">
            @if (ViewDataTyped.IsEditable)
            {
                @Html.DropDownListFor(m => m.PlanningDesignStartYear, ViewDataTyped.PlanningDesignStartYearRange, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                @Html.ValidationMessageFor(m => m.PlanningDesignStartYear)
            }
            else
            {
                <p class="form-control-static">@(ViewDataTyped.ProjectUpdate.GetPlanningDesignStartYear()).</p>
            }
        </div>
    </div>
    <div class="form-group form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(m => m.ImplementationStartYear)
        </div>
        <div class="col-sm-8">
            @if (ViewDataTyped.IsEditable)
            {
                @Html.DropDownListFor(m => m.ImplementationStartYear, ViewDataTyped.ImplementationStartYearRange, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                @Html.ValidationMessageFor(m => m.ImplementationStartYear)
            }
            else
            {
                <p class="form-control-static">@ViewDataTyped.ProjectUpdate.ImplementationStartYear</p>
            }
        </div>
    </div>
    <div class="form-group form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(m => m.CompletionYear)
            @{
                // The following required icon is used for dynamically displaying the required icon for the completion year when the project
                // is in certain stages. Added some simple javascript in the ConstrainProjectYears.js file to handle the changes since that
                // is what is already being used to make the years dynamic upon selection of other years. If we have to do much more
                // like this we should probably change this to all be angular -- 10/14/2020 SMG [PF-2281]
                var completedDateRequiredProjectStageIDs = ViewDataTyped.ProjectStagesModels.Where(x => x == ProjectStage.Completed || x == ProjectStage.PostImplementation).Select(x => x.ProjectStageID).ToList();
            }
            <sup style="display: @(completedDateRequiredProjectStageIDs.Contains(Model.ProjectStageID) ? "inline-block" : "none");" data-show-when-project-stage-in="@String.Join(",", completedDateRequiredProjectStageIDs)">
                <span class="requiredFieldIcon glyphicon glyphicon-flash" style="color: #800020; font-size: 8px;"></span>
            </sup>
        </div>
        <div class="col-sm-8">
            @if (ViewDataTyped.IsEditable)
            {
                @Html.DropDownListFor(m => m.CompletionYear, ViewDataTyped.CompletionYearRange, new Dictionary<string, object>() { { "style", "width: auto" }, { "class", "form-control" } })
                @Html.ValidationMessageFor(m => m.CompletionYear)
            }
            else
            {
                <p class="form-control-static">@ViewDataTyped.ProjectUpdate.CompletionYear</p>
            }
        </div>
    </div>
    <div class="row form-group-condensed">
        <div class="col-sm-4 control-label">
            @Html.LabelWithSugarFor(FieldDefinitionEnum.TaxonomyLeaf.ToType())
        </div>
        <div class="col-sm-8">
            @ViewDataTyped.TaxonomyLeafDisplayName
        </div>
    </div>
    @if (ViewDataTyped.TenantHasSolicitations)
    {
        <div class="row form-group-condensed">
            <div class="col-sm-4 control-label">
                @Html.LabelWithSugarFor(FieldDefinitionEnum.Solicitation.ToType())
            </div>
            <div class="col-sm-8">
                @if (ViewDataTyped.Project.Solicitation != null)
                {
                    @ViewDataTyped.Project.Solicitation.SolicitationName
                }
                else
                {
                    @Html.Raw("None")
                }

            </div>
        </div>
    }

    
    <script type="text/javascript" src="/Views/Shared/ConstrainProjectYears.js"></script>
    <script>
        @{
            var implementationYears = ViewDataTyped.ImplementationStartYearRange.Where(x => !string.IsNullOrWhiteSpace(x.Value)).Select(x => x.Value).ToList();
            var completionYears = ViewDataTyped.CompletionYearRange.Where(x => !string.IsNullOrWhiteSpace(x.Value)).Select(x => x.Value).ToList();
        }

        initializeYearConstraining("@Html.IdFor(x => x.PlanningDesignStartYear)",
            "@Html.IdFor(x => x.ImplementationStartYear)", @implementationYears.Min(), @implementationYears.Max(),
            "@Html.IdFor(x => x.CompletionYear)", @completionYears.Min(), @completionYears.Max(), "@Html.IdFor(x => x.ProjectStageID)", @ViewDataTyped.TenantUsesFiscalYears.ToString().ToLower())
    </script>
</div>

    if (ViewDataTyped.IsEditable)
    {
        if (ViewDataTyped.ShowApproveAndReturnButton)
        {
            <hr />
            <div class="row form-group">
                <div class="col-sm-4 control-label">@Html.LabelWithSugarFor(x => x.Comments)</div>
                <div class="col-sm-8">
                    @Html.TextAreaFor(x => x.Comments, new {style = "width: 100%", @class = "form-control"})
                </div>
            </div>
        }
        <hr />
        SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData);
        <div>
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> { "btn btn-xs btn-firma" }, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.ProjectUpdateStatus.IsBasicsUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Basics", FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> { "btn btn-xs btn-firma" }, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>
        </div>
    }
}
