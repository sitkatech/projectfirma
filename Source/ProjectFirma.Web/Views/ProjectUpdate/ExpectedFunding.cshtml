@*-----------------------------------------------------------------------
    <copyright file="ExpectedFunding.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common.HtmlHelperExtensions
@using ProjectFirma.Web.Common
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.ProjectUpdate
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Shared.ExpenditureAndBudgetControls
@inherits ExpectedFunding

@section JavascriptAndStylesContent
{
    @if (ViewDataTyped.IsEditable && ViewDataTyped.AreProjectBasicsValid)
    {
        <script src="@Url.Content("~/Views/ProjectUpdate/ExpectedFundingController.js")" type="text/javascript"></script>
        <script type="text/javascript">
            // <![CDATA[
            angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
                function() {
                    return {
                        AngularModel: @Html.Raw(JObject.FromObject(Model.ViewModelForAngular)),
                        AngularViewData: @Html.Raw(JObject.FromObject(ViewDataTyped.ViewDataForAngular))
                    };
                });

            // ]]>
        </script>
        <style>
            .table > tbody > tr.secondRow > td {
                border-top: none
            }

            .table > tbody > tr > th {
                border-top: none
            }

            .funding td:first-child, .funding th:first-child {
                width: 30px;
            }

            .summaryTableHeader {
                background-color: #666666;
            }

            .summaryTableHeader label, .summaryTableHeader span {
                color: #FFFFFF;
                font-weight: normal;
            }

            .summaryTableRow {
                background-color: #ffffff;
            }
        </style>
    }
}

@if (!ViewDataTyped.AreProjectBasicsValid)
{
    <div class="alert alert-danger">
        @FirmaValidationMessages.UpdateSectionIsDependentUponBasicsSection
    </div>
}


<p>
    Enter your @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel())'s total budget by @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) and based on whether the funding is @FieldDefinitionEnum.SecuredFunding.ToType().GetFieldDefinitionLabel() or @FieldDefinitionEnum.TargetedFunding.ToType().GetFieldDefinitionLabel().
    Enter the value of any funding gaps for which you have not identified a @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) in the "@(FieldDefinitionEnum.NoFundingSourceIdentified.ToType().GetFieldDefinitionLabel())" row.
    If you haven't yet identified any @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized()), you can skip step 2 and just enter values in the "@(FieldDefinitionEnum.NoFundingSourceIdentified.ToType().GetFieldDefinitionLabel())" row.
</p>

<hr/>

@if (!ViewDataTyped.IsEditable)
{
    ProjectBudgetSummary.RenderPartialView(Html, ViewDataTyped.ProjectBudgetSummaryViewData);
    
    ProjectBudgetsAnnual.RenderPartialView(Html, ViewDataTyped.ProjectBudgetsAnnualViewData);
}
else if (ViewDataTyped.AreProjectBasicsValid)
{
    using (Html.BeginForm())
    {
        <div ng-app="ProjectFirmaApp" ng-controller="ExpectedFundingController">
            <div class="form-group">
                <label class="control-label">
                    1. @Html.Label("Does the " + @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() + " budget vary by year or is it the same?")
                </label>
                <div class="input-group" style="margin-left: 20px;">
                    <select ng-model="selectedFundingTypeID"
                            class="selectpicker"
                            data-container="body"
                            data-width="100%">
                        <option ng-repeat="fundingType in fundingTypes()"
                                value="{{fundingType.Value}}"
                                ng-selected="selectedFundingTypeID == fundingType.Value"
                                ng-bind="fundingType.Text"
                        ></option>
                    </select>
                    @Html.ValidationMessageFor(m => m.ViewModelForAngular.FundingTypeID)
                </div>
            </div>

            <div class="form-group">
                <label class="control-label">2. Identify your @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel())'s @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized().</label>
                <div class="input-group" style="padding-bottom: 5px; margin-left: 20px;">
                    <select ng-model="FundingSourceIDToAdd"
                            class="selectpicker"
                            data-live-search="true"
                            data-container="body"
                            title="Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add"
                            data-width="70%">
                        <option value="null" disabled selected>Select a @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() to Add</option>
                        <option ng-repeat="fundingSource in filteredFundingSources()"
                                value="{{fundingSource.FundingSourceID}}"
                                ng-selected="FundingSourceIDToAdd == fundingSource.FundingSourceID"
                                ng-bind="fundingSource.DisplayName"
                                data-tokens="{{fundingSource.DisplayName}} {{fundingSource.OrganizationFullName}}">
                        </option>
                    </select>
                    <span class="input-group-btn">
                        <button class="btn btn-firma" type="button" style="margin-left: 5px;" ng-click="addRow()">Add</button>
                    </span>
                    <span style="vertical-align: middle; display: inline-block; margin-left: 5px">
                        Not listed?
                        @ModalDialogFormHelper.ModalDialogFormLink("Contact support", ViewDataTyped.RequestFundingSourceUrl, "Request Support", 800, "Submit Request", "Cancel", new List<string>(), null, null)
                    </span>
                    <br />
                </div>
            </div>
            <div style="overflow-x: auto" class="form-inline">
                <label class="control-label">3. Enter amount provided by each @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel().</label>
                <div style="margin-left: 20px;">
                    <table class="table funding table-condensed" style="margin-top: 20px; overflow: scroll; margin-bottom: 0">
                        <tr>
                            <th></th>
                            <th ng-show="AngularModel.ProjectFundingSourceBudgetUpdateSimples.length > 0">@Html.LabelWithSugarFor(FieldDefinitionEnum.FundingSource.ToType())</th>
                            <th style="text-align: right" ng-if="budgetVariesByYear() || budgetTypeNotSelected()" ng-bind="@("getYearRange()")"></th>
                            <th style="text-align: right" ng-if="budgetSameEachYear()">Each Year</th>
                        </tr>
                        <tr ng-repeat-start="projectFundingSourceBudgetUpdateSimple in AngularModel.ProjectFundingSourceBudgetUpdateSimples | orderBy:[getFundingSourceName]">
                            <td>
                                <span class="glyphicon glyphicon-trash blue" title="Remove row" alt="Remove row" ng-click="deleteRow(projectFundingSourceBudgetUpdateSimple)" style="cursor: pointer"></span>
                            </td>
                            <td>
                                <span ng-bind="getFundingSourceName(projectFundingSourceBudgetUpdateSimple)"></span>
                                <span style="font-style: italic"> - @Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType())</span>
                            </td>
                            <td style="text-align: right">
                                <input type="text" style="text-align: right" ng-model="projectFundingSourceBudgetUpdateSimple.SecuredAmount" class="sitkaCurrency form-control " ng-currency />
                            </td>
                        </tr>
                        <tr ng-repeat-end class="secondRow">
                            <td></td>
                            <td>
                                <span ng-bind="getFundingSourceName(projectFundingSourceBudgetUpdateSimple)"></span>
                                <span style="font-style: italic"> - @Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType())</span>
                            </td>
                            <td style="text-align: right">
                                <input type="text" style="text-align: right" ng-model="projectFundingSourceBudgetUpdateSimple.TargetedAmount" class="sitkaCurrency form-control" ng-currency />
                            </td>
                        </tr>
                    </table>
                    <table class="table funding table-condensed" style="margin-bottom: 0px; overflow: scroll">
                        <tbody>
                            <tr>
                                <td></td>
                                <td>@Html.LabelWithSugarFor(FieldDefinitionEnum.NoFundingSourceIdentified.ToType())</td>
                                <td style="text-align: right;">
                                    <input type="text" style="text-align: right" ng-model="AngularModel.NoFundingSourceIdentifiedYet" class="sitkaCurrency form-control" ng-currency-allow-negative />
                                </td>
                            </tr>
                            <tr>
                                <td></td>
                                <td ng-if="budgetVariesByYear() || budgetTypeNotSelected()">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedTotalCost.ToType())</td>
                                <td ng-if="budgetSameEachYear()">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType())</td>
                                <td style="text-align: right; font-weight: bold;">
                                    {{getTotalEstimatedCost() | currency:"$"}}
                                </td>
                            </tr>
                        </tbody>
                    </table>
                </div>

            </div>
            <div class="form-group">
                <label class="control-label">4. Enter any comments about the changes made to this @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s budget.</label>
                <div style="margin-left: 20px">@Html.TextAreaWithMaxLengthFor(m => m.ExpectedFundingUpdateNote, new TextAreaForExtensions.TextAreaDimensions(null, 3), "Enter comment", new List<string> { "form-control" })</div>
            </div>
            <div>
                <p>
                    <label ng-if="budgetVariesByYear() || budgetTypeNotSelected()" class="control-label">5. Confirm this summary of your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s @FieldDefinitionEnum.EstimatedTotalCost.ToType().GetFieldDefinitionLabel().</label>
                    <label ng-if="budgetSameEachYear()" class="control-label">5. Confirm this summary of your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s @FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType().GetFieldDefinitionLabel().</label>
                </p>
                <div style="margin: 10px 0px; padding: 5px 20px;">
                    <table class="table table-bordered table-condensed" style="overflow: scroll;">
                        <tr class="summaryTableHeader">
                            <td>@Html.LabelWithSugarFor(FieldDefinitionEnum.SecuredFunding.ToType())</td>
                            <td>@Html.LabelWithSugarFor(FieldDefinitionEnum.TargetedFunding.ToType())</td>
                            <td>@Html.LabelWithSugarFor(FieldDefinitionEnum.NoFundingSourceIdentified.ToType())</td>
                            <td ng-if="budgetVariesByYear() || budgetTypeNotSelected()">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedTotalCost.ToType(), "TOTAL")</td>
                            <td ng-if="budgetSameEachYear()">@Html.LabelWithSugarFor(FieldDefinitionEnum.EstimatedAnnualOperatingCost.ToType(), "TOTAL")</td>
                        </tr>
                        <tr class="summaryTableRow">
                            <td>{{ getSecuredTotal() | currency:"$" }}</td>
                            <td>{{ getTargetedTotal() | currency:"$" }}</td>
                            <td>{{ AngularModel.NoFundingSourceIdentifiedYet | currency:"$"}}</td>
                            <td>{{ getTotalEstimatedCost() | currency:"$"}}</td>
                        </tr>
                    </table>
                </div>
            </div>

            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.FundingTypeID)" value="{{selectedFundingTypeID}}"/>
            <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.NoFundingSourceIdentifiedYet)" value="{{AngularModel.NoFundingSourceIdentifiedYet}}" />
            <div ng-repeat="projectFundingSourceBudgetUpdateSimple in AngularModel.ProjectFundingSourceBudgetUpdateSimples | orderBy:[getFundingSourceName]">
                <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].ProjectUpdateBatchID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.ProjectUpdateBatchID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].FundingSourceID).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.FundingSourceID}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].SecuredAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.SecuredAmount}}"/>
                <input type="hidden" name="@Html.NameFor(x => x.ViewModelForAngular.ProjectFundingSourceBudgetUpdateSimples[0].TargetedAmount).ToString().Replace("0", "{{$index}}")" value="{{projectFundingSourceBudgetUpdateSimple.TargetedAmount}}"/>
            </div>

            @if (ViewDataTyped.ShowApproveAndReturnButton)
            {
                <hr/>
                <div class="row form-group">
                    <div class="col-md-3">@Html.LabelWithSugarFor(x => x.Comments)</div>
                    <div class="col-md-9">
                        @Html.TextAreaFor(x => x.Comments, new Dictionary<string, object> {{"style", "width: 100%"}, {"class", "form-control"}})
                    </div>
                </div>
            }
            <hr/>
            @{ SectionComments.RenderPartialView(Html, ViewDataTyped.SectionCommentsViewData); }
            <table class="summaryLayout" style="width: 100%">
                <tr>
                    <td>
                        @ModalDialogFormHelper.ModalDialogFormLink("revert-button", "Revert Current Page", ViewDataTyped.RefreshUrl, "Refresh this section", 500, "Continue", "Continue", "Cancel", new List<string> {"btn btn-xs btn-firma"}, null, null, null, "Undo all changes on this page")
                        @if (ViewDataTyped.ProjectUpdateStatus.IsBudgetsUpdated)
                        {
                            @ModalDialogFormHelper.ModalDialogFormLink("diff-link-id", "Show Changes", ViewDataTyped.DiffUrl, string.Format("Changes to {0} Budget", FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()), 800, "hidden-save-button", string.Empty, "Close", new List<string> {"btn btn-xs btn-firma"}, null, null, null)
                        }
                    </td>
                    <td style="text-align: right; white-space: nowrap">
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes made on this page" value="false" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save</button>
                        <button type="submit" class="btn btn-xs btn-firma" title="Save changes and continue to next page" value="true" name="@Html.NameFor(x => x.AutoAdvance)" ng-disabled="pmForm.$invalid">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
                    </td>
                </tr>
            </table>


        </div>
    }
}


<script type="text/javascript">
    //<![CDATA[
    jQuery(function() { HookupCheckIfFormIsDirty(undefined, ".submitProject"); });
    // ]]>
</script>