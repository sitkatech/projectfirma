@*-----------------------------------------------------------------------
    <copyright file="EditProfileTaxonomy.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using MoreLinq
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.Organization.EditProfileTaxonomy

@section JavascriptAndStylesContent
{
    <script src="@Url.Content("~/Content/combo-tree/comboTreePlugin.js")" type="text/javascript"></script>
    <link href="@Url.Content("~/Content/combo-tree/style.css")" rel="stylesheet" type="text/css"/>

}

<style>
    .comboTreeDropDownContainer {
        display: block !important;
        max-height: 450px;
        background: #fff;
        border: none;
    }
        .comboTreeDropDownContainer li span.comboTreeItemTitle.comboTreeItemHover {
            background-color: #337ab7; /* same color as the active item in SitkaLeftRightListbox*/
            color: #fff;
        }

        .comboTreeDropDownContainer li:hover {
            background-color: #f1f1f1; /* same hover color as SitkaLeftRightListbox */
        }
            .comboTreeDropDownContainer li:hover ul {
                background-color: #fff; /* needed for IE */
            }

        .comboTreeInputWrapper {
            display: none !important;
        }

    /* mimic styling of SitkaLeftRightListbox */
    .sitka-listBox {
        border: 1px solid #ccc;
        border-radius: 3px;
        max-height: 415px;
        min-height: 415px;
        overflow-y: auto;
    }

    .topLevelTaxonomy {
        font-weight: bold;
    }

    ul {
        list-style: none;
    }
</style>

<p>
    <div>
        Select the items below that are most relevant to your organization. The Matchmaker service will find @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() aligned with your selections.
    </div>
</p>

@using (Html.BeginForm())
{
    <div class="form-horizontal" style="height: 500px">
        <div class="row">
            <div class="col-xs-6">
                <div class="form-group">
                    <div class="col-sm-12">
                        <label>Available Items</label>
                        <input type="text" id="taxonomySelector" placeholder="Select" autocomplete="off">
                    </div>
                </div>
            </div>
            <div class="col-xs-6" style="margin-top: 20px">
                <label>Selected Items</label>
                <div id="selectedItemsDisplayTree" style="max-height: 415px; overflow-y: auto; margin-top: 20px">
                    <p class="systemText" style="display: none; margin-top: 15px" id="noneSelectedText">None selected</p>
                    @foreach (var treeNode in ViewDataTyped.TopLevelTaxonomyTierAsComboTreeNodes)
                    {
                        <ul style="list-style: none; padding-left: 0; margin-bottom: 0">
                            <li id="@treeNode.Key" style="margin-top: 15px;" class="topLevelTaxonomy taxonomyItem @(treeNode.SubNodes != null && treeNode.SubNodes.Count > 0 ? treeNode.SubNodes.Select(x => "parent" + x.Key).ToDelimitedString(" ") : "")">@treeNode.Title</li>
                            @if (treeNode.SubNodes != null && treeNode.SubNodes.Count > 0)
                            {
                                <li style="list-style: none;">
                                    <ul>
                                        @foreach (var subNode in treeNode.SubNodes)
                                        {
                                            <li style="list-style: disc;" id="@subNode.Key" class="taxonomyItem @(subNode.SubNodes != null && subNode.SubNodes.Count > 0 ? subNode.SubNodes.Select(x => "parent" + x.Key).ToDelimitedString(" ") : "")">@subNode.Title</li>
                                            if (subNode.SubNodes != null && subNode.SubNodes.Count > 0)
                                            {
                                                <li style="list-style-type: none;">
                                                    <ul>
                                                        @foreach (var subSubNode in subNode.SubNodes)
                                                        {
                                                            <li style="list-style: circle;" id="@subSubNode.Key" class="taxonomyItem">@subSubNode.Title</li>
                                                        }
                                                    </ul>
                                                </li>
                                            }
                                        }
                                    </ul>
                                </li>
                            }
                        </ul>
                    }
                </div>
            </div>
        </div>
    </div>
    @Html.HiddenFor(m => m.OrganizationID)
}

<script type="text/javascript">
    var selectedNodes = @Html.Raw(JArray.FromObject(Model.TaxonomyCompoundKeys));
    var treeSources = @Html.Raw(JArray.FromObject(ViewDataTyped.TopLevelTaxonomyTierAsComboTreeNodes));
    var comboTreeInstance = $('#taxonomySelector').comboTree({
        source: treeSources,
        isMultiple: true,
        selected: selectedNodes,
        cascadeSelect: true,
        collapse: true,
        alwaysOpen: true,
        expandTopLevel: true
    });

    // hide all, then show the selected items
    jQuery("#selectedItemsDisplayTree .taxonomyItem").hide();
    if (comboTreeInstance.getSelectedIds() != null && comboTreeInstance.getSelectedIds().length > 0) {
        comboTreeInstance.getSelectedIds().forEach(function (selectedID) {
            jQuery("#noneSelectedText").hide();
            jQuery("#" + selectedID).show();
            jQuery(".parent" + selectedID).show();
        });
    }
    else {
        jQuery("#noneSelectedText").show();
    }


    comboTreeInstance.onChange(function(event) {
        if (comboTreeInstance.getSelectedIds() != null && comboTreeInstance.getSelectedIds().length > 0) {
            $('#taxonomySelector').val("" + comboTreeInstance.getSelectedIds().length + " selected");
            jQuery("#selectedItemsDisplayTree .taxonomyItem").hide();
            comboTreeInstance.getSelectedIds().forEach(function (selectedID) {
                jQuery("#noneSelectedText").hide();
                jQuery("#" + selectedID).show();
                jQuery(".parent" + selectedID).show();
            });
        } else {
            jQuery("#selectedItemsDisplayTree .taxonomyItem").hide();
            jQuery("#noneSelectedText").show();
        }
    });

    var form = jQuery("form");
    form.submit(function (event) {
        for (var i = 0; i < comboTreeInstance.getSelectedIds().length; i++) {
            var name = "@(Html.NameFor(x => x.TaxonomyCompoundKeys[0]).ToString())".replace("0", i);
            jQuery("<input type='hidden' name='" + name + "' value='" + comboTreeInstance.getSelectedIds()[i] + "'/>").appendTo(form);
        }
    });
    jQuery(function ()
    {
        HookupCheckIfFormIsDirty(undefined, ".submitProject");
        if (selectedNodes.length > 0) {
            $('#taxonomySelector').val("" + selectedNodes.length + " selected");
        }
        jQuery("#" + comboTreeInstance.comboTreeId + "ComboTreeSourceUlmain").attr('class', 'sitka-listBox');
        // mimic styling of search bar in SitkaLeftRightListbox
        jQuery("#" + comboTreeInstance.comboTreeId + "MultiFilter").attr('class', 'form-control');
    });
</script>
