@*-----------------------------------------------------------------------
<copyright file="ProjectLocationDetail.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using LtInfo.Common
@using LtInfo.Common.ModalDialog
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.Organization
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.Organization.MatchmakerOrganizationLocationDetail

<style>
    .mapEditor textarea {
        resize: none;
        height: 60px;
    }
</style>

<p>
   <div>
      To define your organization's area of interest you may use its jurisdictional boundary
      (defined on the Overview tab), or draw a polygon. The Matchmaker service will find
      intersections between this area of interest and projects' spatial data (simple
      locations, detailed locations, and geospatial areas such as watersheds or districts).
   </div>
   <br/>
   <div>
      <div>
         <label>@Html.RadioButtonFor(m => m.UseOrganizationBoundaryForMatchmaker, true, new { onchange = "updateRadioButtonValue(this)" }) Use Organization's Boundary @(!ViewDataTyped.OrganizationHasBoundary ? "(No Organization Boundary Found)" : String.Empty)</label>
      </div>
      <div>
         <label>@Html.RadioButtonFor(m => m.UseOrganizationBoundaryForMatchmaker, false, new { onchange = "updateRadioButtonValue(this)" }) Draw Area of Interest</label>
      </div>
   </div>
</p>

<hr/>

@*<p>
    <span style="margin-right:10px">Instead of drawing your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() details by hand, you may alternately upload a GIS file.</span>
    @ModalDialogFormHelper.ModalDialogFormLink(null,
        "Upload a GIS File",
        ViewDataTyped.UploadGisFileUrl,
        "Upload GIS File",
        1000,
        ModalDialogFormHelper.SaveButtonID,
        "Approve Upload",
        "Cancel",
        new List<string>(){"btn", "btn-sm", "btn-firma"},
        null,
        null,
        ViewDataTyped.MapFormID,
        null)
</p>*@


<div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 500px">
</div>

<script type="text/javascript">
    getDrawOptions = function(editableFeatureGroup) {
        var myIcon = L.MakiMarkers.icon({
            icon: "marker",
            color: "#f357a1",
            size: "m"
        });

        var polygonDrawOptions = {
                allowIntersection: false, // Restricts shapes to simple polygons
                drawError: {
                    color: '#e1e100', // Color the shape will turn when intersects
                    message: 'Self-intersecting polygons are not allowed.' // Message that will show when intersect
                },
                shapeOptions: {
                    color: '#f357a1'
                }
            };

        var rectangleDrawOptions = {
                shapeOptions: {
                    color: "#f357a1"
                }
            };

        var options = {
            position: 'topleft',
            draw: {
                polyline: false, // Turns off this drawing tool
                polygon: polygonDrawOptions,
                circle: false, // Turns off this drawing tool
                rectangle: rectangleDrawOptions,
                marker: false // Turns off this drawing tool
            },
            edit: {
                featureGroup: editableFeatureGroup, //REQUIRED!!
                edit: {
                    maintainColor: true,
                    opacity: 0.3
                },
                remove: true
            }
        };
        return options;
    };

    var projectFirmaMap;
    var drawControl;
    jQuery(function() {
        var mapInitJson = @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
       // The colors and many options set in the backend don't appear to actually affect the layers on the map
       var organizationBoundaryFeatureJsonObject = @Html.Raw(JObject.FromObject(ViewDataTyped.OrganizationBoundaryLayerGeoJson).ToString(Formatting.None));
       var editableFeatureJsonObject = @Html.Raw(JObject.FromObject(ViewDataTyped.EditableLayerGeoJson).ToString(Formatting.None));

        projectFirmaMap = new ProjectFirmaMaps.Map(mapInitJson);

        // user-editable boundary feature group
       projectFirmaMap.editableFeatureGroup = new L.FeatureGroup();
       // org boundary feature group
       projectFirmaMap.orgBoundaryFeatureGroup = new L.FeatureGroup();

       var bindAnnotationPopup = function(layer, feature)
        {
            var leafletId = layer._leaflet_id;
            var popupOptions = {
                minWidth: 200
            };
            layer.bindPopup("", popupOptions);
            layer.on('click', function(f)
            {
                if(layer.editing.enabled())
                {
                    f.target.closePopup();
                    return;
                }
                var popup = f.target._popup;
                var annotation = Sitka.Methods.isUndefinedNullOrEmpty(feature) ? "" : Sitka.Methods.isUndefinedNullOrEmpty(feature.properties.Info) ? "" : feature.properties.Info;
                var annotationMaxLength = @ViewDataTyped.AnnotationMaxLength;
                var charsRemaining = annotationMaxLength - annotation.length;
                var textareaId = projectFirmaMap.getTextAreaId(leafletId);
                var charRemainingForTextareaId = "CharactersRemaining_" + textareaId;
                var popupContent = "<b>Notes:</b> <br />" +
                    "<textarea id=\"" + textareaId + "\" " +
                    "onkeyup=\"Sitka.Methods.keepTextAreaWithinMaxLength(this, " + annotationMaxLength + ", 20, '" + charRemainingForTextareaId + "', 'Characters Remaining: ');\" " +
                    "onkeydown=\"Sitka.Methods.keepTextAreaWithinMaxLength(this, " + annotationMaxLength + ", 20, '" + charRemainingForTextareaId +  "', 'Characters Remaining: ');\">" +
                    annotation + "</textarea>" +
                    "<div id=\"" + charRemainingForTextareaId + "\" style=\"text-align:right;color:#666666;\">Characters Remaining: " + charsRemaining + "</div><br />" +
                    "<button id=\"buttonFor" + leafletId + "\" class=\"button btn-xs btn-info\" onclick=\"savePopupAnnotationEditor(" + leafletId + ")\">Save</button>";
                popup.setContent(popupContent);
                popup.update();

                jQuery("#textboxFor" + leafletId).focus();
            });
        };

        var layerGroup = L.geoJson(organizationBoundaryFeatureJsonObject.GeoJsonFeatureCollection, {
           onEachFeature: function (feature, layer) {
                console.log('organizationBoundaryFeatureJsonObject -- onEachFeature function -- layer thingy function');
                if (layer.getLayers)
                {
                   layer.getLayers().forEach(function (l) { projectFirmaMap.orgBoundaryFeatureGroup.addLayer(l); });
                }
                else
                {
                   projectFirmaMap.orgBoundaryFeatureGroup.addLayer(layer);
                   projectFirmaMap.orgBoundaryFeatureGroup.setStyle({ color: '@Organization.OrganizationAreaOfInterestMapLayerColor'});
                }
                bindAnnotationPopup(layer, feature);
            }
        });

         var layerGroup2 = L.geoJson(editableFeatureJsonObject.GeoJsonFeatureCollection, {
            onEachFeature: function (feature, layer) {
               //console.log('editableFeatureJsonObject -- onEachFeature function -- layer thingy function');
               //console.log('LayerInitialVisibility for feature: ' + editableFeatureJsonObject.LayerInitialVisibility);
               if (layer.getLayers)
               {
                  layer.getLayers().forEach(function(l) { projectFirmaMap.editableFeatureGroup.addLayer(l); });
               }
               else
               {
                  projectFirmaMap.editableFeatureGroup.addLayer(layer);
                  //console.log('Trying to set color..');
                  projectFirmaMap.editableFeatureGroup.setStyle({ color: '@Organization.OrganizationAreaOfInterestMapLayerColor' });
               }
               feature.properties.LayerSource = '@MatchmakerOrganizationLocationDetailViewModel.WktAndOtherInfo.LayerSourceUserDrawn';
               bindAnnotationPopup(layer, feature);
            }
         });

        var drawOptions = getDrawOptions(projectFirmaMap.editableFeatureGroup);
        drawControl = new L.Control.Draw(drawOptions);
        if (!@Model.UseOrganizationBoundaryForMatchmaker.ToJS()) {
            projectFirmaMap.map.addControl(drawControl);
        }

       if (organizationBoundaryFeatureJsonObject.LayerInitialVisibility)
       {
          projectFirmaMap.map.addLayer(projectFirmaMap.orgBoundaryFeatureGroup);
       }

       if (editableFeatureJsonObject.LayerInitialVisibility)
       {
          projectFirmaMap.map.addLayer(projectFirmaMap.editableFeatureGroup);
       }

       projectFirmaMap.map.on('draw:created', function (e)
       {
            //console.log('map_on_draw--created function');
            var layer = e.layer;
            projectFirmaMap.editableFeatureGroup.addLayer(layer);
            var leafletId = layer._leaflet_id;
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature = new Object();
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature.properties = { LayerSource: "@MatchmakerOrganizationLocationDetailViewModel.WktAndOtherInfo.LayerSourceUserDrawn"};
            projectFirmaMap.editableFeatureGroup._layers[leafletId].feature.type = "Feature";
            var feature = projectFirmaMap.editableFeatureGroup._layers[leafletId].feature;
            bindAnnotationPopup(layer, feature);
            updateFeatureCollectionJson();
        });

       projectFirmaMap.map.on('draw:edited', function (e)
       {
          //console.log('map_on_draw--edited function');
          updateFeatureCollectionJson();
        });

        projectFirmaMap.map.on('draw:deleted', function(e)
        {
           //console.log('map_on_draw--deleted function');
           updateFeatureCollectionJson();
        });

        updateFeatureCollectionJson();

        var saveButton = jQuery("#" + "@ModalDialogFormHelper.SaveButtonID");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(saveButton))
        {
            saveButton.text("Save");
        }

        var modalTitle = jQuery(".ui-dialog-title");
        if(!Sitka.Methods.isUndefinedNullOrEmpty(modalTitle))
        {
            modalTitle.html(
                "@string.Format("Edit {0} - Detail", FieldDefinitionEnum.ProjectLocation.ToType().GetFieldDefinitionLabel())");
        }
    });

    ProjectFirmaMaps.Map.prototype.getTextAreaId = function(featureId) { return "textareaFor" + featureId; };

    function savePopupAnnotationEditor(featureId) {
       var textBoxForPopup = jQuery("#" + projectFirmaMap.getTextAreaId(featureId));
       projectFirmaMap.editableFeatureGroup._layers[featureId].feature.properties.Info = textBoxForPopup.val();
       projectFirmaMap.map.closePopup();
       updateFeatureCollectionJson();
    }

   function updateFeatureCollectionJson() {
       //console.log('updateFeatureCollectionJson');
       //debugger;
       var geoJson = projectFirmaMap.editableFeatureGroup.toGeoJSON();
       var mapForm = jQuery("#" + "@ViewDataTyped.MapFormID");
       mapForm.html("");
       var hiddens = [];
       for (var i = 0; i < geoJson.features.length; ++i) {
          var currentWktName = "name=\"@Html.NameFor(x => x.WktAndOtherInfos[0].Wkt)\"".replace("0", i);
          var currentWktAnnotationName = "name=\"@Html.NameFor(x => x.WktAndOtherInfos[0].Annotation)\"".replace("0", i);
          var currentWktLayerSourceName = "name=\"@Html.NameFor(x => x.WktAndOtherInfos[0].LayerSource)\"".replace("0", i);

          //console.log('currentWktName:' + currentWktName);
          //console.log('currentWktAnnotationName:' + currentWktAnnotationName);

          var currentWktValue = Terraformer.WKT.convert(geoJson.features[i].geometry);
          var currentWktAnnotationValue = Sitka.Methods.htmlEncode(geoJson.features[i].properties.Info);
          var currentWktLayerSourceValue = Sitka.Methods.htmlEncode(geoJson.features[i].properties.LayerSource);

          //console.log('currentWktValue:' + currentWktValue);
          //console.log('currentWktAnnotationValue:' + currentWktAnnotationValue);
          //console.log('geoJson.features[i]:' + geoJson.features[i]);

          hiddens.push("<input type=\"hidden\" " + currentWktName + " value=\"" + currentWktValue + "\" />");
          hiddens.push("<input type=\"hidden\" " + currentWktAnnotationName + " value=\"" + currentWktAnnotationValue + "\" />");
          hiddens.push("<input type=\"hidden\" " + currentWktLayerSourceName + " value=\"" + currentWktLayerSourceValue + "\" />");
       }
       var radioButtonValue = jQuery("#@Html.IdFor(m => m.UseOrganizationBoundaryForMatchmaker):checked").val();
       var radioButtonName = "name=\"@Html.NameFor(x => x.UseOrganizationBoundaryForMatchmaker)\"";
       hiddens.push("<input type=\"hidden\" " + radioButtonName + " value=\"" + Sitka.Methods.htmlEncode(radioButtonValue) + "\" />");

       mapForm.html(hiddens.join("\r\n"));
    }

    function updateRadioButtonValue(target) {
        var selectedTheOrganizationBoundaryRadioButton = jQuery(target).val();

        if (selectedTheOrganizationBoundaryRadioButton === 'True') {
            projectFirmaMap.map.addLayer(projectFirmaMap.orgBoundaryFeatureGroup);
            projectFirmaMap.map.removeLayer(projectFirmaMap.editableFeatureGroup);
            updateMapEditOptions(true);
        } else {
            projectFirmaMap.map.addLayer(projectFirmaMap.editableFeatureGroup);
            projectFirmaMap.map.removeLayer(projectFirmaMap.orgBoundaryFeatureGroup);
            updateMapEditOptions(false);
        }

        updateFeatureCollectionJson();
    }

    function updateMapEditOptions(useOrganizationBoundary) {
        if (useOrganizationBoundary) {
            projectFirmaMap.map.removeControl(drawControl);
        } else {
            projectFirmaMap.map.addControl(drawControl);
        }
    }

</script>

<form method="POST" id="@ViewDataTyped.MapFormID" action="@ViewDataTyped.SaveFeatureCollectionUrl"></form>
