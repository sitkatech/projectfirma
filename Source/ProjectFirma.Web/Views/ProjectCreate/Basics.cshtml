@*-----------------------------------------------------------------------
<copyright file="Basics.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using HtmlDiff
@using LtInfo.Common.HtmlHelperExtensions
@using LtInfo.Common.Views
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models
@inherits ProjectFirma.Web.Views.ProjectCreate.Basics

@section JavascriptAndStylesContent
{
    <style>
        .row {
            margin-top: 5px;
        }
    </style>
    <script type="text/javascript">
        // <![CDATA[
        jQuery(function() {
            HookupCheckIfFormIsDirty(undefined, ".submitProject");

            // Bypass the "Could not parse a blank value" error
            jQuery("#TaxonomyLeafID option.bs-title-option").val(-1);
        });
        // ]]>
    </script>
    @if (ViewDataTyped.TenantAttribute.EnableSecondaryProjectTaxonomyLeaf)
    {
        <script type="text/javascript">
            // <![CDATA[
            jQuery(function() {
                var secondaryProjectTaxonomyLeafSelectionDropdown =
                    jQuery("#secondaryProjectTaxonomyLeafSelectionDropdown");
                var secondaryProjectTaxonomyLeafSelectionContainer =
                    jQuery("#secondaryProjectTaxonomyLeafSelectionContainer");
                var secondaryProjectTaxonomyLeafNameMap =
                    @Html.Raw(JObject.FromObject(ViewDataTyped.TaxonomyLeafs.ToDictionary(x => int.Parse(x.Value), x => x.Text)));
                jQuery("#addSecondaryProjectTaxonomyLeafButton").on("click",function() {
                    if (!secondaryProjectTaxonomyLeafSelectionDropdown.val() ||
                        jQuery("#secondaryProjectTaxonomyLeafSelection_" +
                            secondaryProjectTaxonomyLeafSelectionDropdown.val()).length) {
                        return;
                    }

                    secondaryProjectTaxonomyLeafSelectionContainer.append(
                        "<li id=\"secondaryProjectTaxonomyLeafSelection_" +
                        secondaryProjectTaxonomyLeafSelectionDropdown.val() +
                        "\">" +
                        "<a href=\"#\" onclick=\"event.preventDefault(); jQuery('#secondaryProjectTaxonomyLeafSelection_" +
                        secondaryProjectTaxonomyLeafSelectionDropdown.val() +
                        "').remove();\">" +
                        "<span class=\"glyphicon glyphicon-trash\" style=\"margin-right: 1em;\"></span>" +
                        "</a>" +
                        secondaryProjectTaxonomyLeafNameMap[secondaryProjectTaxonomyLeafSelectionDropdown.val()] +
                        "<input type=\"hidden\" name=\"@(Html.NameFor(m => m.SecondaryProjectTaxonomyLeafIDs))[]\" value=\"" +
                        secondaryProjectTaxonomyLeafSelectionDropdown.val() +
                        "\"/>" +
                        "</li>"
                    );
                    secondaryProjectTaxonomyLeafSelectionDropdown.val(null);
                });

                // HACKY fix to make width for select picker look good
                var i = 0, interval = setInterval(initializeWidth, 1);

                function initializeWidth() {
                    if (i === 9) {
                        clearInterval(interval);
                    } else {
                        resizeSecondaryProjectTaxonomyLeafSelectionDropdown();
                    }
                }

                jQuery(window).resize(function() {
                    resizeSecondaryProjectTaxonomyLeafSelectionDropdown();
                });

                function resizeSecondaryProjectTaxonomyLeafSelectionDropdown() {
                    jQuery("[data-id=\"secondaryProjectTaxonomyLeafSelectionDropdown\"]")
                        .width(jQuery("[data-id=\"@Html.IdFor(m => m.TaxonomyLeafID)\"]").width() -
                            jQuery("#addSecondaryProjectTaxonomyLeafInputGroupButton").width());
                }
            });
            // ]]>
        </script>
    }
}

<p>Add your @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()'s basic information here.</p>
<hr/>

@using (Html.BeginForm())
{
    <div class="form-horizontal">

        @if (ViewDataTyped.TenantAttribute.EnableSolicitations)
        {
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.SolicitationID)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.DropDownListFor(m => m.SolicitationID, ViewDataTyped.SolicitationOptions, new { @class = "form-control", style = "width: auto;" })
                    @Html.ValidationMessageFor(m => m.SolicitationID)
                    <span class="smallExplanationText">
                        The @FieldDefinitionEnum.Solicitation.ToType().GetFieldDefinitionLabel() cannot be changed after a @FieldDefinitionEnum.Proposal.ToType().GetFieldDefinitionLabel() is accepted.
                    </span>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(m => m.SolicitationID)
        }

        @if (ViewDataTyped.TenantAttribute.ProjectExternalDataSourceEnabled && ViewDataTyped.CanEditExternalID)
        {
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ExternalID)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.TextBoxFor(m => m.ExternalID, new { @class = "form-control", @type = "number" })
                    @Html.ValidationMessageFor(m => m.ExternalID)
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(m => m.ExternalID)
        }

        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.TaxonomyLeafID, MultiTenantHelpers.GetTaxonomyLeafDisplayNameForProject(), null)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.SearchableDropDownListFor(x => x.TaxonomyLeafID, ViewDataTyped.TaxonomyLeafs, string.Format("Select a {0}", MultiTenantHelpers.GetTaxonomyLeafDisplayNameForProject()))
                @Html.ValidationMessageFor(m => m.TaxonomyLeafID)
            </div>
        </div>
        @if (ViewDataTyped.TenantAttribute.EnableSecondaryProjectTaxonomyLeaf)
        {
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.SecondaryProjectTaxonomyLeafIDs)
                </div>
                <div class="col-xs-12 col-sm-8">
                    <div class="input-group" style="margin-bottom: 1em;">
                        <select class="selectpicker" id="secondaryProjectTaxonomyLeafSelectionDropdown" data-live-search="true" data-live-search-placeholder="Search">
                            <option value=""></option>
                            @foreach (var x in ViewDataTyped.TaxonomyLeafs)
                            {
                                <option value="@x.Value">@x.Text</option>
                            }
                        </select>
                        <span class="input-group-btn" id="addSecondaryProjectTaxonomyLeafInputGroupButton">
                            <button class="btn btn-firma" type="button" id="addSecondaryProjectTaxonomyLeafButton">
                                <span class="glyphicon glyphicon-plus"></span>
                                Add
                            </button>
                        </span>
                    </div>
                    <ul id="secondaryProjectTaxonomyLeafSelectionContainer" class="list-unstyled">
                        @foreach (var secondaryProjectTaxonomyLeafID in Model.SecondaryProjectTaxonomyLeafIDs)
                        {
                            <li id="secondaryProjectTaxonomyLeafSelection_@secondaryProjectTaxonomyLeafID">
                                <a href="#" onclick="event.preventDefault();jQuery('#secondaryProjectTaxonomyLeafSelection_@secondaryProjectTaxonomyLeafID').remove();">
                                    <span class="glyphicon glyphicon-trash" style="margin-right: 1em;">
                                    </span>
                                </a>@(ViewDataTyped.TaxonomyLeafs.ToDictionary(x => int.Parse(x.Value), x => x.Text)[secondaryProjectTaxonomyLeafID])
                                <input type="hidden" name="@(Html.NameFor(m => m.SecondaryProjectTaxonomyLeafIDs))[]" value="@secondaryProjectTaxonomyLeafID" />
                            </li>
                        }
                    </ul>
                    @Html.ValidationMessageFor(m => m.SecondaryProjectTaxonomyLeafIDs)
                </div>
            </div>
        }
        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.ProjectName)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.TextBoxFor(m => m.ProjectName, new { @class = "form-control" })
                @Html.ValidationMessageFor(m => m.ProjectName)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.ProjectDescription)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.TextAreaWithMaxLengthFor(m => m.ProjectDescription, new TextAreaForExtensions.TextAreaDimensions(null, 8), null, new List<string> { "form-control" })
                @Html.ValidationMessageFor(m => m.ProjectDescription)
            </div>
        </div>
        @if (ViewDataTyped.ShowProjectStageDropDown)
        {
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectStageID, true)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @if (ViewDataTyped.IsEditable)
                    {
                        @Html.DropDownListFor(m => m.ProjectStageID, ViewDataTyped.ProjectStages, new { @class = "form-control", style = "width: auto;" })
                        @Html.ValidationMessageFor(m => m.ProjectStageID)
                    }
                    else
                    {
                        @ViewDataTyped.ProjectStage.GetProjectStageDisplayName()
                    }
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(m => m.ProjectStageID)
        }
        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.PlanningDesignStartYear)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.DropDownListFor(m => m.PlanningDesignStartYear, ViewDataTyped.PlanningDesignStartYearRange, new { @class = "form-control", style = "width: auto;" })
                @Html.ValidationMessageFor(m => m.PlanningDesignStartYear)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.ImplementationStartYear)
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.DropDownListFor(m => m.ImplementationStartYear, ViewDataTyped.ImplementationStartYearRange, new { @class = "form-control", style = "width: auto;" })
                @Html.ValidationMessageFor(m => m.ImplementationStartYear)
            </div>
        </div>
        <div class="form-group">
            <div class="col-xs-12 col-sm-4 control-label">
                @Html.LabelWithSugarFor(m => m.CompletionYear)
                @{
                    // The following required icon is used for dynamically displaying the required icon for the completion year when the project
                    // is in certain stages. Added some simple javascript in the ConstrainProjectYears.js file to handle the changes since that
                    // is what is already being used to make the years dynamic upon selection of other years. If we have to do much more
                    // like this we should probably change this to all be angular -- 10/14/2020 SMG [PF-2281]
                    var completedDateRequiredProjectStageIDs = ViewDataTyped.ProjectStagesModels.Where(x => x == ProjectStage.Completed || x == ProjectStage.PostImplementation).Select(x => x.ProjectStageID).ToList();
                    var displayRequiredIconInitially = Model.ProjectStageID.HasValue && completedDateRequiredProjectStageIDs.Contains(Model.ProjectStageID.Value);
                }
                <sup style="display: @(displayRequiredIconInitially ? "inline-block" : "none");" data-show-when-project-stage-in="@String.Join(",", completedDateRequiredProjectStageIDs)">
                    <span class="requiredFieldIcon glyphicon glyphicon-flash" style="color: #800020; font-size: 8px;"></span>
                </sup>
            </div>
            <div class="col-xs-12 col-sm-8">
                @Html.DropDownListFor(m => m.CompletionYear, ViewDataTyped.CompletionYearRange, new { @class = "form-control", style = "width: auto;" })
                @Html.ValidationMessageFor(m => m.CompletionYear)
            </div>
        </div>
        @if (ViewDataTyped.TenantAttribute.EnableProjectCategories)
        {
            <div class="form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelWithSugarFor(m => m.ProjectCategoryEnum)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @Html.EnumDropDownListFor(m => m.ProjectCategoryEnum, new { @class = "form-control" })
                    @Html.ValidationMessageFor(m => m.ProjectCategoryEnum)
                    <span class="smallExplanationText">
                        The @FieldDefinitionEnum.ProjectCategory.ToType().GetFieldDefinitionLabel() cannot be changed after a @FieldDefinitionEnum.Proposal.ToType().GetFieldDefinitionLabel() is accepted.
                    </span>
                </div>
            </div>
        }
        else
        {
            @Html.HiddenFor(m => m.ProjectCategoryEnum)
        }


        @if (@ViewDataTyped.ShowCommentsSection)
        {
            <hr />
            <div class="row form-group">
                <div class="col-xs-12 col-sm-4 control-label">
                    @Html.LabelFor(m => m.Comments)
                </div>
                <div class="col-xs-12 col-sm-8">
                    @if (ViewDataTyped.CanEditComments)
                    {
                        @Html.TextAreaFor(m => m.Comments, new { style = "width: 100%", @class = "form-control" })
                        @Html.ValidationMessageFor(m => m.Comments)
                    }
                    else
                    {
                        @Html.Raw(ViewDataTyped.Project.BasicsComment.HtmlEncodeWithBreaks())
                    }
                </div>
            </div>
        }
    </div>

    @Html.HiddenFor(m => m.ProjectID)
    @Html.HiddenFor(m => m.ImportExternalProjectStagingID)

    <hr/>
    <div class="pull-right">
        <button type="submit" class="btn btn-xs btn-firma" value="false" name="@Html.NameFor(x => x.AutoAdvance)">Save</button>
        <button type="submit" class="btn btn-xs btn-firma" value="true" name="@Html.NameFor(x => x.AutoAdvance)">Save &amp; Continue<span class='glyphicon glyphicon-chevron-right'></span></button>
    </div>

    <script type="text/javascript" src="/Views/Shared/ConstrainProjectYears.js"></script>
    <script>
        @{
            var implementationYears = ViewDataTyped.ImplementationStartYearRange.Where(x => !string.IsNullOrWhiteSpace(x.Value)).Select(x => x.Value).ToList();
            var completionYears = ViewDataTyped.CompletionYearRange.Where(x => !string.IsNullOrWhiteSpace(x.Value)).Select(x => x.Value).ToList();
        }

        initializeYearConstraining("@Html.IdFor(x => x.PlanningDesignStartYear)",
            "@Html.IdFor(x => x.ImplementationStartYear)", @implementationYears.Min(), @implementationYears.Max(),
            "@Html.IdFor(x => x.CompletionYear)", @completionYears.Min(), @completionYears.Max(), "@Html.IdFor(x => x.ProjectStageID)", @ViewDataTyped.TenantUsesFiscalYears.ToString().ToLower())
    </script>
}
