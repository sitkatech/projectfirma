@*-----------------------------------------------------------------------
    <copyright file="SitkaLeftRightListbox.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq
@model ProjectFirma.Web.Models.SitkaLeftRightListbox
@{
    var moreInformationDictionary = ViewData.ContainsKey("MoreInformationDictionary")
        ? ViewData["MoreInformationDictionary"]
        : new { };
    var moreInformationLabel = ViewData.ContainsKey("MoreInformationLabel")
        ? ViewData["MoreInformationLabel"]
        : "";
    var showFilterBox = ViewData.ContainsKey("ShowFilterBox")
        ? Boolean.Parse(ViewData["ShowFilterBox"].ToString()) ? "true" : "false"
        : "false";
}
    <script type="text/javascript">
    angular.module("ProjectFirmaApp").controller("SitkaLeftRightListboxController",
        function($scope, angularModelAndViewData) {
            $scope.AngularModel = angularModelAndViewData.AngularModel;
            $scope.MoreInformationDictionary = angularModelAndViewData.MoreInformationDictionary;
            $scope.MoreInformationLabel = angularModelAndViewData.MoreInformationLabel;
            $scope.NoInformationAvailableMessage = "No " + angularModelAndViewData.MoreInformationLabel.toLowerCase() + " available";
            $scope.ShowFilterBox = angularModelAndViewData.ShowFilterBox;
            $scope.ListboxUniqueID = angularModelAndViewData.ListboxUniqueID;

            $scope.Items = $scope.AngularModel.SelectListItems;
            // ItemsSelectedUnfiltered is what will be posted on Save
            $scope.ItemsSelectedUnfiltered = $scope.Items.filter(function (x) { return x.Selected; });
            $scope.ItemsSelected = $scope.Items.filter(function(x) { return x.Selected; });
            $scope.ItemsAvailable = $scope.Items.filter(function (x) { return !x.Selected; });

            $scope.CurrentlySelectedItem = $scope.ItemsAvailable.length > 0 ? $scope.ItemsAvailable[0] : {};



            $scope.HasDescriptionsDictionary = function() {
                return !jQuery.isEmptyObject($scope.MoreInformationDictionary);
            }

            $scope.SelectItem = function() {
                if ($scope.CurrentlySelectedItem.Value) {
                    $scope.CurrentlySelectedItem.Selected = true;
                }
            }

            $scope.DeselectItem = function() {
                if ($scope.CurrentlySelectedItem.Value) {
                    $scope.CurrentlySelectedItem.Selected = false;
                }
            }

            $scope.SelectDisabled = function() {
                if (jQuery.isEmptyObject($scope.CurrentlySelectedItem)) {
                    return true;
                }
                if (!$scope.CurrentlySelectedItem.Selected) {
                    return false;
                } 
                return true;
            }

            $scope.DeselectDisabled = function () {
                if (jQuery.isEmptyObject($scope.CurrentlySelectedItem)) {
                    return true;
                }
                if ($scope.CurrentlySelectedItem.Selected) {
                    return false;
                }
                return true;
            }

            $scope.$watch('Items',
                function() {
                    $scope.updateItemsLists();
                    //console.log($scope.Items);
                },
                true);

            $scope.GetItemsAvailableFilterText = function () {
                var input = document.getElementById("ItemsAvailableSearch_" + $scope.ListboxUniqueID);
                return input != null ? input.value.toUpperCase() : null;
            }

            $scope.GetItemsSelectedFilterText = function () {
                var input = document.getElementById("ItemsSelectedSearch_" + $scope.ListboxUniqueID);
                return input != null ? input.value.toUpperCase() : null;
            }

            $scope.MatchesCurrentFilter = function (selectItem, filterText) {
                if (Sitka.Methods.isUndefinedNullOrEmpty(filterText)) {
                    return true;
                }
                return selectItem.Text.toLowerCase().includes(filterText.toLowerCase());
            }

            $scope.updateSelectedItemsList = function() {
                $scope.ItemsSelectedUnfiltered = $scope.Items.filter(function(x) { return x.Selected; });
                $scope.ItemsSelected = $scope.Items.filter(function (x) {
                    var keepItem = x.Selected;
                    if ($scope.ShowFilterBox) {
                        keepItem = keepItem && $scope.MatchesCurrentFilter(x, $scope.GetItemsSelectedFilterText());
                    }
                    return keepItem;
                });
            }

            $scope.updateAvailableItemsList = function() {
                $scope.ItemsAvailable = $scope.Items.filter(function (x) {
                    var keepItem = !x.Selected;
                    if ($scope.ShowFilterBox) {
                        keepItem = keepItem && $scope.MatchesCurrentFilter(x, $scope.GetItemsAvailableFilterText());
                    }
                    return keepItem;
                });
            }

            $scope.updateItemsLists = function() {
                $scope.updateSelectedItemsList();
                $scope.updateAvailableItemsList();
            }
        });
    angular.module("ProjectFirmaApp").factory("angularModelAndViewData",
        function() {
            return {
                AngularModel: @Html.Raw(JObject.FromObject(Model).ToString(Formatting.None)),
                MoreInformationDictionary: @Html.Raw(JObject.FromObject(moreInformationDictionary).ToString(Formatting.None)),
                MoreInformationLabel: "@moreInformationLabel",
                ShowFilterBox: @showFilterBox,
                ListboxUniqueID: "@Model.ListboxUniqueID"
            };
        });

    jQuery(function() {
        angular.bootstrap(jQuery("#@Model.ListboxUniqueID"), ["ProjectFirmaApp"]);
    });
</script>

<style type="text/css">
    /*
        These styles could be moved to a separate file or the base.theme.less file, however
        it might be beneficial to keep them here for now while we iterate on this listbox abstraction
    */
    .sitka-listbox {
        border: 1px solid #ccc;
        border-radius: 3px;
        min-height: 350px;
        max-height: 350px;
        overflow: auto;
    }

    .sitka-listbox ul {
        list-style: none;
        padding: 0;
        margin: 0;
        overflow-y: auto;
        position: relative;
    }

    .sitka-listbox ul li input {
        opacity: 0;
        position: absolute;
        z-index: -1;
    }

    .sitka-listbox ul li input:focus + label {
        outline: 5px auto;
        outline-offset: -2px;
    }

    .sitka-listbox ul li label {
        display: block;
        margin-bottom: 0;
        padding-left: 5px;
        cursor: pointer;
    }

    .sitka-listbox ul li:nth-child(odd) label {
        background-color: #f1f1f1;
    }

    .sitka-listbox ul li label:hover {
        background-color: #E2E8EE;
    }

    .sitka-listbox ul li.active label {
        background-color: #337ab7;
        color: #fff;
    }

    .sitka-listbox-container {
        display: flex;
        margin-bottom: 10px;
    }
    .sitka-listbox-container .listbox-header {
        margin-bottom: 5px;
        display: block;
    }

    .sitka-listbox-buttons {
        display: flex;
        flex-direction: column;
        justify-content: center;
        align-items: center;
        height: 100%;
    }

    .sitka-listbox-buttons button + button {
        margin-top: 10px;
    }
    .sitka-listbox-description {
        min-height: 5em;
    }
</style>

<div ng-app="ProjectFirmaApp" id="@Model.ListboxUniqueID" ng-controller="SitkaLeftRightListboxController">
    <div class="row sitka-listbox-container">
        <div class="col-xs-5">
            <strong class="listbox-header">Available Items ({{ItemsAvailable.length}})</strong>
            <input ng-if="ShowFilterBox" class="form-control" type="text" placeholder="Search..." id="ItemsAvailableSearch_@Model.ListboxUniqueID" ng-keyup="updateAvailableItemsList()" autocomplete="off">
            <div class="sitka-listbox">
                <ul>
                    <li ng-repeat="item in ItemsAvailable" ng-class="{active: item == $parent.CurrentlySelectedItem}">
                        <input id="{{ item.Value }}" type="radio" tabindex="0" ng-model="$parent.CurrentlySelectedItem" ng-value="item" name="ItemsRadioInput" />
                        <label for="{{ item.Value }}">{{ item.Text }}</label>
                    </li>
                </ul>
            </div>
        </div>
        <div class="col-xs-2">
            <div class="sitka-listbox-buttons">
                <button type="button" class="btn btn-firma" ng-click="SelectItem()" ng-disabled="SelectDisabled()"><span class="glyphicon glyphicon-chevron-right"></span></button>
                <button type="button" class="btn btn-firma" ng-click="DeselectItem()" ng-disabled="DeselectDisabled()"><span class="glyphicon glyphicon-chevron-left"></span></button>
            </div>
        </div>
        <div class="col-xs-5">
            <strong class="listbox-header">Selected Items</strong>
            <input ng-if="ShowFilterBox" class="form-control" type="text" placeholder="Search..." id="ItemsSelectedSearch_@Model.ListboxUniqueID" ng-keyup="updateSelectedItemsList()" autocomplete="off">
            <div class="sitka-listbox">
                <ul>
                    <li ng-repeat="item in ItemsSelected" ng-class="{active: item == $parent.CurrentlySelectedItem}">
                        <input id="{{ item.Value }}" type="radio" tabindex="0" ng-model="$parent.CurrentlySelectedItem" ng-value="item" name="ItemsRadioInput" />
                        <label for="{{ item.Value }}">{{ item.Text }}</label>
                    </li>
                </ul>
            </div>
        </div>
    </div>
    <div class="row sitka-listbox-description" ng-if="HasDescriptionsDictionary()">
        <div class="col-xs-12">
            <p>
                <strong>{{ MoreInformationLabel }}:</strong>
                <span ng-if="MoreInformationDictionary[CurrentlySelectedItem.Value]">{{ MoreInformationDictionary[CurrentlySelectedItem.Value] }}</span>
                <span class="systemText" ng-if="!MoreInformationDictionary[CurrentlySelectedItem.Value]">{{ NoInformationAvailableMessage }}</span>
            </p>
        </div>
    </div>
    <select name="@Html.NameFor(x => x.SelectedItems)"
            id="@Html.IdFor(x => x.SelectedItems)"
            style="display: none;"
            multiple="multiple"
            ng-model="ItemsSelectedUnfiltered"
            ng-options="item as item.Text for item in Items track by item.Value"
            ng-change="change()">
    </select>
</div>