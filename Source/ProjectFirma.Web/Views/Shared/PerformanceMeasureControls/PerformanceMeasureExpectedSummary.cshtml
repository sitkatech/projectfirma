@*-----------------------------------------------------------------------
<copyright file="PerformanceMeasureExpectedSummary.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using LtInfo.Common
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.Shared.PerformanceMeasureControls.PerformanceMeasureExpectedSummary

@if (ViewDataTyped.PerformanceMeasureExpecteds.Any())
{
    <table class="summaryLayout table table-borderless">
        <tr>
            <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.PerformanceMeasure.ToType())</th>
            <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.PerformanceMeasureSubcategory.ToType())</th>
            <th style="text-align: right" class="col-sm-2">@Html.LabelWithSugarFor(FieldDefinitionEnum.ExpectedValue.ToType())</th>
        </tr>
        @foreach (var performanceMeasureExpected in ViewDataTyped.PerformanceMeasureExpecteds)
        {

            var measurementUnitTypeDisplayName = performanceMeasureExpected.PerformanceMeasure.MeasurementUnitType == MeasurementUnitType.Number || performanceMeasureExpected.PerformanceMeasure.MeasurementUnitType == MeasurementUnitType.Dollars ?
                "" :
                " " + performanceMeasureExpected.PerformanceMeasure.MeasurementUnitType.LegendDisplayName;
            var reportedValue = performanceMeasureExpected.PerformanceMeasure.MeasurementUnitType == MeasurementUnitType.Dollars ? performanceMeasureExpected.GetReportedValue().ToStringCurrency() : performanceMeasureExpected.GetReportedValue().ToGroupedNumeric();


            <tr>
                <td>@performanceMeasureExpected.PerformanceMeasure.GetDisplayNameAsUrl()</td>
                <td>@performanceMeasureExpected.GetPerformanceMeasureSubcategoriesAsString()</td>
                <td style="text-align: right;">
                    @(performanceMeasureExpected.GetReportedValue().HasValue ? new HtmlString(reportedValue + measurementUnitTypeDisplayName) : new HtmlString("<span class='systemText'>Not Provided</span>"))</td>

            </tr>
        }
    </table>
}
else
{
    <p class="systemText">No expected @MultiTenantHelpers.GetPerformanceMeasureNamePluralized() set for this @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()).</p>
}
