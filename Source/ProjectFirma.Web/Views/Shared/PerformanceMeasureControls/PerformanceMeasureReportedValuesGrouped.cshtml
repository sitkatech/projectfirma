@*-----------------------------------------------------------------------
    <copyright file="PerformanceMeasureReportedValuesGrouped.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using LtInfo.Common
@using ProjectFirmaModels.Models
@using LtInfo.Common.Views
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.Shared.PerformanceMeasureControls.PerformanceMeasureReportedValuesGrouped

@{ const string fixedWidthStyleForYearTotalAndUnits = "min-width:80px; width:80px;";}

@if (ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Any())
{
    <div style="overflow:auto;">
    @foreach (var performanceMeasureCalendarYearReportedValue in ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues)
    {
        var isLast = ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Last() == performanceMeasureCalendarYearReportedValue;
        var showTotalColumn = ViewDataTyped.CalendarYearsForPerformanceMeasures.Count > 1;
        var subcategoryCount = performanceMeasureCalendarYearReportedValue.PerformanceMeasureSubcategories.Count;
        var pmUnits = performanceMeasureCalendarYearReportedValue.MeasurementUnitType != MeasurementUnitType.Dollars ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.LegendDisplayName : string.Empty;
        var colspanForPerformanceMeasureDisplayName = showTotalColumn ? subcategoryCount + ViewDataTyped.CalendarYearsForPerformanceMeasures.Count + 2 : subcategoryCount + ViewDataTyped.CalendarYearsForPerformanceMeasures.Count + 1;
        <table class="summaryLayout performanceMeasureTable table table-responsive table-striped" style="margin-bottom: 20px; @ViewDataTyped.HideByDefaultStyle();">
            <tr style="">
                <th colspan="@(colspanForPerformanceMeasureDisplayName)">
                    @performanceMeasureCalendarYearReportedValue.PerformanceMeasureDisplayNameAsUrl
                </th>
            </tr>
            @if (!performanceMeasureCalendarYearReportedValue.HasRealSubcategories)
            {
            <tr>
                <th></th>
                @if (showTotalColumn)
                {
                    <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom">Total</th>
                }
                @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                {
                    <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom;">
                        @calendarYear.CalendarYearDisplay
                    </th>
                }
                <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom">Units</th>
            </tr>
                foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues)
                {
                <tr>
                    <th></th>
                    @if (showTotalColumn)
                    {
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">@((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value).ToGroupedNumeric())</th>
                    }
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                    {
                        <td style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                            @(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear.CalendarYear) ? (performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName: string.Empty) + subcategoriesReportedValue.CalendarYearReportedValue[calendarYear.CalendarYear].ToGroupedNumeric() : "N/A")
                        </td>
                    }
                    <th style="@fixedWidthStyleForYearTotalAndUnits @fixedWidthStyleForYearTotalAndUnits text-align: right">@pmUnits</th>
                </tr>
                }
                if (performanceMeasureCalendarYearReportedValue.IsSummable)
                {
                    <tr style="border-top: 1px solid">
                        <th style="text-align: right">Total</th>
                        @if (showTotalColumn)
                        {
                            <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                                @((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Sum(p => p.CalendarYearReportedValue.Sum(q => q.Value)).ToGroupedNumeric())
                            </th>
                        }
                        @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                        {
                            <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                                @((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Where(p => p.CalendarYearReportedValue.ContainsKey(calendarYear.CalendarYear)).Sum(p => p.CalendarYearReportedValue[calendarYear.CalendarYear]).ToGroupedNumeric())
                            </th>
                        }
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">@pmUnits</th>
                    </tr>
                }
            }
            else
            {
                <tr>
                    @if (performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Any())
                    {
                        foreach (var performanceMeasureSubcategoryName in performanceMeasureCalendarYearReportedValue.PerformanceMeasureSubcategories.Select(x => x.PerformanceMeasureSubcategoryDisplayName))
                        {
                            <th>
                                @performanceMeasureSubcategoryName
                            </th>
                        }
                    }
                    @if (showTotalColumn)
                    {
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom;">Total</th>
                    }
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                    {
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom;">
                            @calendarYear.CalendarYearDisplay
                        </th>
                    }
                    <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right; vertical-align: bottom;">Units</th>
                </tr>


                foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues)
                {
                <tr>
                    @if (!subcategoriesReportedValue.SubcategoryNames.Any())
                    {
                        <td colspan="@subcategoryCount"></td>
                    }
                    else
                    {
                        foreach (var subcategory in performanceMeasureCalendarYearReportedValue.PerformanceMeasureSubcategories)
                        {
                            {
                                var pmvso = subcategoriesReportedValue.PerformanceMeasureValueSubcategoryOptions.SingleOrDefault(x => x.PerformanceMeasureSubcategoryID == subcategory.PerformanceMeasureSubcategoryID);
                                var subcategoryOptionName = pmvso != null ? pmvso.PerformanceMeasureSubcategoryOption.PerformanceMeasureSubcategoryOptionName : "Unknown";

                        <td style="overflow-x: auto">@subcategoryOptionName</td>
                            }
                        }
                    }

                    @if (showTotalColumn)
                    {
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">@((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value).ToGroupedNumeric())</th>
                    }

                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                    {
                        <td style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                            @(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear.CalendarYear) ? (performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + subcategoriesReportedValue.CalendarYearReportedValue[calendarYear.CalendarYear].ToGroupedNumeric() : "N/A")
                        </td>
                    }
                    <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">@pmUnits</th>
                </tr>
                }


                if(performanceMeasureCalendarYearReportedValue.IsSummable)
                {
                    <tr style="">
                        <th colspan="@subcategoryCount" style="text-align: right">Total</th>
                        @if (showTotalColumn)
                        {
                            <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                                @((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Sum(p => p.CalendarYearReportedValue.Sum(q => q.Value)).ToGroupedNumeric())
                            </th>
                        }
                        @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures)
                        {
                            <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">
                                @((performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? MeasurementUnitType.Dollars.LegendDisplayName : string.Empty) + performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.Where(p => p.CalendarYearReportedValue.ContainsKey(calendarYear.CalendarYear)).Sum(p => p.CalendarYearReportedValue[calendarYear.CalendarYear]).ToGroupedNumeric())
                            </th>
                        }
                        <th style="@fixedWidthStyleForYearTotalAndUnits text-align: right">@pmUnits</th>
                    </tr>
                }
            }
        </table>
        if (!isLast)
        {
            <hr/>
        }
    }
    </div>
}
else
{
    <p class="systemText">No annual @MultiTenantHelpers.GetPerformanceMeasureName() accomplishments entered for this @(FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()).</p>
}

@if (ViewDataTyped.ExemptReportingYears.Any())
{
    <hr />
    <table class="summaryLayout">
        <tr>
            <td colspan="2">No accomplishments to report for:</td>
        </tr>
        <tr>
            <th>Year(s):</th>
            <td>@string.Join(", ", ViewDataTyped.ExemptReportingYears.OrderBy(x => x))</td>
        </tr>
        <tr>
            <th>Explanation:</th>
            <td>@Html.Raw(ViewDataTyped.ExemptionExplanation.HtmlEncodeWithBreaks())</td>
        </tr>
    </table>
}
