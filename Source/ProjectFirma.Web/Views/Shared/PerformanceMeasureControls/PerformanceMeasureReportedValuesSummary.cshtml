@*-----------------------------------------------------------------------
<copyright file="PerformanceMeasureReportedValuesSummary.cshtml" company="Tahoe Regional Planning Agency and Sitka Technology Group">
Copyright (c) Tahoe Regional Planning Agency and Sitka Technology Group. All rights reserved.
<author>Sitka Technology Group</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using ProjectFirma.Web.Views.Shared
@using ProjectFirmaModels.Models
@using LtInfo.Common
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.Shared.PerformanceMeasureControls.PerformanceMeasureReportedValuesSummary

@if (ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.Any())
{
    <table class="summaryLayout">
        <colgroup>
            <col>
            <col>
            @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(x => x.CalendarYear))
            {
                switch (calendarYear.AddedDeletedOrRealElement)
                {
                    case AddedDeletedOrRealElement.AddedElement:
                        <col class="@HtmlDiffContainer.DisplayCssClassAddedElement" style="background-color: @HtmlDiffContainer.BackgroundColorForAddedElement">
                        break;
                    case AddedDeletedOrRealElement.DeletedElement:
                        <col class="@HtmlDiffContainer.DisplayCssClassDeletedElement" style="background-color: @HtmlDiffContainer.BackgroundColorForDeletedElement">
                        break;
                    case AddedDeletedOrRealElement.RealElement:
                        <col>
                        break;
                    default:
                        throw new ArgumentOutOfRangeException();
                }
            }
            <col>
            <col>
        </colgroup>
        <tr>
            <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.PerformanceMeasure.ToType())</th>
            <th>@Html.LabelWithSugarFor(FieldDefinitionEnum.PerformanceMeasureSubcategory.ToType())</th>
            @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy.CalendarYear))
            {
                <th class="@calendarYear.DisplayCssClass" style="text-align: right">@calendarYear.CalendarYearDisplay</th>
            }
            <th style="text-align: right">Total</th>
            <th></th>
        </tr>
        @foreach (var performanceMeasureCalendarYearReportedValue in ViewDataTyped.PerformanceMeasureSubcategoriesCalendarYearReportedValues.OrderBy(x => x.PerformanceMeasureDisplayName))
        {
            foreach (var subcategoriesReportedValue in performanceMeasureCalendarYearReportedValue.SubcategoriesReportedValues.OrderBy(x => x.PerformanceMeasureSubcategories))
            {
                <tr class="@performanceMeasureCalendarYearReportedValue.DisplayCssClass">
                    <td>@performanceMeasureCalendarYearReportedValue.PerformanceMeasureDisplayNameAsUrl</td>
                    <td>@Html.Raw(subcategoriesReportedValue.PerformanceMeasureSubcategories)</td>
                    @foreach (var calendarYear in ViewDataTyped.CalendarYearsForPerformanceMeasures.OrderBy(cy => cy.CalendarYear))
                    {
                        <td class="@calendarYear.DisplayCssClass" style="text-align: right">
                            <span>@(subcategoriesReportedValue.CalendarYearReportedValue.ContainsKey(calendarYear.CalendarYear) ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType == MeasurementUnitType.Dollars ? subcategoriesReportedValue.CalendarYearReportedValue[calendarYear.CalendarYear].ToStringCurrency() : subcategoriesReportedValue.CalendarYearReportedValue[calendarYear.CalendarYear].ToGroupedNumeric() : "0")</span>
                        </td>
                    }
                    <th style="text-align: right">
                        <span>@performanceMeasureCalendarYearReportedValue.MeasurementUnitType.DisplayValue(subcategoriesReportedValue.CalendarYearReportedValue.Sum(z => z.Value))</span>
                    </th>
                    <th>
                        <span>@(performanceMeasureCalendarYearReportedValue.MeasurementUnitType != MeasurementUnitType.Dollars ? performanceMeasureCalendarYearReportedValue.MeasurementUnitType.LegendDisplayName : string.Empty)</span>
                    </th>
                </tr>
            }
        }
    </table>
}
