@*-----------------------------------------------------------------------
    <copyright file="GoogleChartPopup.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirmaModels.Models
@using LtInfo.Common
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Mvc
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@inherits ProjectFirma.Web.Views.Shared.ViewGoogleChart

<style>


    .toggle-on, .toggle-off {
        font-size: 12px;
    }

    .toggle {
        padding-right: 20px;
        padding-left: 20px;
        padding-bottom: 0;
    }

    /* Prevents flickering of tooltip when mouse is moved in cases where the tooltop appears behind the mouse (e.g. on a chart with many legend items to display in the tooltip) */
    svg > g > g:last-child {
        pointer-events: none
    }

</style>

@* Removing because bootstrap-toggle is broken if script is included more than once, and ViewGoogleChart can be added as a partial multiple times to a page. Consider adding to FirmaIncludes?  *@
@* <script type="text/javascript" src="@Url.Content("~/Content/bootstrap-toggle/bootstrap-toggle.min.js")"></script> *@
@* <link href="@Url.Content("~/Content/bootstrap-toggle/bootstrap-toggle.min.css")" rel="stylesheet" /> *@


<form id="@(ViewDataTyped.ChartUniqueName)_downloadChartDataForm" action="@ViewDataTyped.DownloadChartDataUrl" method="post">
    @foreach (var googleChartJson in ViewDataTyped.GoogleChartJsons)
    {
        @Html.Hidden("GoogleChartJsons[]", JObject.FromObject(googleChartJson).ToString(Formatting.None))
    }
    @Html.Hidden("ExcelFilename", ViewDataTyped.ChartTitle)
    @Html.Hidden("MainColumnLabel", ViewDataTyped.MainColumnLabel)
</form>
<div class="chartHeader" style="overflow-y: hidden; vertical-align: top; min-height: 30px;">
    @* ReSharper disable once UnknownCssClass *@
    @if (ViewDataTyped.ShowChartTitle)
    {
        <div class="chartTitle">
            @if (ViewDataTyped.PerformanceMeasure != null && ViewDataTyped.HyperlinkPerformanceMeasureName)
            {
                <span class="helpicon glyphicon glyphicon-question-sign blue" title="Click to get more info on this @MultiTenantHelpers.GetPerformanceMeasureName()"
                      onmouseover="ProjectFirma.Views.Methods.addHelpTooltipPopup(jQuery(this), @ViewDataTyped.PerformanceMeasure.PerformanceMeasureDisplayName.ToJS(), @ViewDataTyped.PerformanceMeasure.GetDefinitionAndGuidanceUrl().ToJS(), 430)">
                </span>
                <a href="@ViewDataTyped.PerformanceMeasure.GetSummaryUrl()" class="chartHeader">@ViewDataTyped.PerformanceMeasure.PerformanceMeasureDisplayName</a>
            }
            else if(ViewDataTyped.ChartTitleWithLink != null)
            {
                @Html.Raw(ViewDataTyped.ChartTitleWithLink)
            }
            else
            {
                <b>@ViewDataTyped.ChartTitle</b>
            }
        </div>
    }
    @if (ViewDataTyped.HasData && ViewDataTyped.GoogleChartJsons.Count(x => !x.IsCumulativeChart) == 1)
    {
        if (!ViewDataTyped.ChartTitle.Equals(ViewDataTyped.GoogleChartJsons.Single(x => !x.IsCumulativeChart).LegendTitle, StringComparison.InvariantCultureIgnoreCase))
        {
            <div>
                By: @ViewDataTyped.GoogleChartJsons.Single(x => !x.IsCumulativeChart).LegendTitle
            </div>
        }
    }
    else if (ViewDataTyped.HasData)
    {
        <div class="subcategorySelector" id="subcategorySelectorFor@(ViewDataTyped.ChartUniqueName)">
            By:
            @if (ViewDataTyped.SortChartsByLegendTitle)
            {
                var htmlAttributes = new Dictionary<string, object> { { "class", "btn-sm btn-light btn" }, { "style", "text-align: left;" } };
                @Html.DropDownList("subcategoryDropdownFor" + ViewDataTyped.ChartUniqueName, ViewDataTyped.GoogleChartJsons.Where(x => !x.IsCumulativeChart).OrderBy(x => x.LegendTitle).ToSelectList(x => x.ChartContainerID, x => x.LegendTitle), htmlAttributes)
            }
            else
            {
                @Html.DropDownList("subcategoryDropdownFor" + ViewDataTyped.ChartUniqueName, ViewDataTyped.GoogleChartJsons.Where(x => !x.IsCumulativeChart).ToSelectList(x => x.ChartContainerID, x => x.LegendTitle))
            }
        </div>
    }
    <!-- Toggle Cumulative Results / Results By Year-->
    @if (ViewDataTyped.CanBeChartedCumulatively && ViewDataTyped.HasData)
    {
        <div class="cumulativeToggleSelector col-md-5" id="cumulativeToggleSelectorFor@(ViewDataTyped.ChartUniqueName)" style="margin-top: 5px; font-size: 12px; font-weight: 700;">
            <strong>@(string.IsNullOrWhiteSpace(ViewDataTyped.CumulativeCheckboxLabel) ? "Cumulative" : ViewDataTyped.CumulativeCheckboxLabel): </strong>
            <input id="cumulativeToggleFor@(ViewDataTyped.ChartUniqueName)" class="cumulativeToggle" type="checkbox" @*data-toggle="toggle" data-size="mini"*@ style="vertical-align: middle; margin-top: 0;"/>
        </div>
    }
</div>
<div class="chartBody" style="@("height: " + ViewDataTyped.ChartHeight + "px;")">
    @if (ViewDataTyped.HasData)
    {
        foreach (var googleChartJson in ViewDataTyped.GoogleChartJsons.OrderByDescending(x => x.LegendTitle))
        {
            <form id="@(googleChartJson.ChartContainerID)_enlargeChartDataForm" action="@ViewDataTyped.ChartPopupUrl" method="post">
                @Html.Hidden("GoogleChartJson", JObject.FromObject(googleChartJson).ToString(Formatting.None))
            </form>

            <div id="@(googleChartJson.ChartContainerID)_container" class="chartGroup@(ViewDataTyped.ChartUniqueName)">
                <!-- Expand / Save / Configure controls, based on current ChartViewMode -->
                <div class="firmaChartControls noPrint">
                    <div class="dropdown">
                        <button id="@(ViewDataTyped.ChartUniqueName)_optionsDropdown" class="btn btn-default btn-xs" type="button" data-toggle="dropdown" aria-haspopup="true" aria-expanded="False">
                            Options
                            <span class="caret"></span>
                        </button>
                        <ul class="dropdown-menu dropdown-menu-right" aria-labeledby="@(ViewDataTyped.ChartUniqueName)_optionsDropdown" style="list-style: none; background: #fff;">
                            <li>
                                <a onclick="GoogleCharts.enlargeChart(@((googleChartJson.ChartContainerID + "_enlargeChartDataForm").ToJS()))" style="cursor: pointer">
                                    <span class="glyphicon glyphicon-fullscreen" style="margin-right: 5px"></span>Enlarge
                                </a>
                            </li>
                            <li>
                                <a style="cursor: pointer" onclick="document.getElementById('@(ViewDataTyped.ChartUniqueName)_downloadChartDataForm').submit();">
                                    <span class="glyphicon glyphicon-download" style="margin-right: 5px;"></span>Download Chart Data
                                </a>
                            </li>
                            @if (ViewDataTyped.CanConfigureChart && !string.IsNullOrWhiteSpace(googleChartJson.SaveConfigurationUrl))
                            {
                                <li>
                                    <a style="cursor: pointer" onclick="GoogleCharts.configureChart('@googleChartJson.ChartContainerID', '@googleChartJson.SaveConfigurationUrl', this)">
                                        <span class="glyphicon glyphicon-wrench" style="margin-right: 5px"></span>Configure
                                    </a>
                                </li>
                            }
                            @if (ViewDataTyped.CanConfigureChart && !string.IsNullOrWhiteSpace(googleChartJson.OptionalResetConfigurationUrl))
                            {
                                <li>
                                    @ModalDialogFormHelper.ModalDialogFormLink("<span class='glyphicon glyphicon-refresh' style='margin-right: 5px'></span>Reset Chart", @googleChartJson.OptionalResetConfigurationUrl, "Reset Chart Configuration?", 600, "Reset", "Cancel", null, null, null)
                                </li>
                            }
                        </ul>
                    </div>
                </div>
                <div id="@googleChartJson.ChartContainerID" class="googleChart" style="margin-top: @(ViewDataTyped.GoogleChartJsons.Count == 1 ? "9px" : "7px"); height: @(ViewDataTyped.ChartHeight)px;">
                    <!-- Actual chart goes here-->
                </div>
                @if (ViewDataTyped.LastUpdatedDate.HasValue)
                {
                    <small style="font-weight: normal;" class="pull-right">
                        Last Updated:
                        @ViewDataTyped.LastUpdatedDate.ToStringDate()
                    </small>
                }
            </div>
        }
    }
    else
    {
        <p class="systemText" style="text-align: center; margin-top: 20px;">No reported data available</p>
    }
</div>

<script type="text/javascript">

    var googleCharts_@(ViewDataTyped.ChartUniqueName) = @Html.Raw(JsonConvert.SerializeObject(ViewDataTyped.GoogleChartJsons, new JavaScriptDateTimeConverter()));

      // Onchange function for multiple possible chart selector dropdowns - not called if neither dropdown exists
        function chartSelector_@(ViewDataTyped.ChartUniqueName)()
        {

            var chartName = "@ViewDataTyped.ChartUniqueName";
            //console.log('Calling chartSelector for @ViewDataTyped.ChartUniqueName');

            // Used when no subcategory options are available
            if (googleCharts_@(ViewDataTyped.ChartUniqueName)[0] != null) {
                var firstChartContainerID = googleCharts_@(ViewDataTyped.ChartUniqueName)[0].containerId;

                var templateDropdown = jQuery("#subcategoryDropdownFor" + chartName);
                var cumulativeToggle = jQuery("#cumulativeToggleFor" + chartName);

                jQuery(".chartGroup" + chartName).css("display", "none");
                // If no subcategory options
                if (templateDropdown.length === 0)
                {
                    if (cumulativeToggle.prop("checked")) {
                        jQuery("#" + (firstChartContainerID + "Cumulative_container")).css("display", "");
                    }
                    else
                    {
                        jQuery("#" + (firstChartContainerID + "_container")).css("display", "");
                    }
                }
                // Multiple subcategory options
                else
                {
                    if (cumulativeToggle.length === 0 || !cumulativeToggle.prop("checked")) {
                        jQuery("#" + (templateDropdown.val() + "_container")).css("display", "");
                    }
                    else
                    {
                        jQuery("#" + (templateDropdown.val() + "Cumulative_container")).css("display", "");
                    }
                }
            }
            GoogleCharts.drawCharts(googleCharts_@(ViewDataTyped.ChartUniqueName));
        }

    jQuery(function()
    {

        function chartSetup_@(ViewDataTyped.ChartUniqueName)()
        {
            //console.log('chartSetup_@(ViewDataTyped.ChartUniqueName) - top');
            
            var chartName = "@ViewDataTyped.ChartUniqueName";
            var templateDropdown = jQuery("#subcategoryDropdownFor" + chartName);
            var cumulativeToggle = jQuery("#cumulativeToggleFor" + chartName);

            var itemCount = jQuery("#subcategoryDropdownFor" + chartName + " option").length;
            if (itemCount > 1)
            {
                templateDropdown.on("change",chartSelector_@(ViewDataTyped.ChartUniqueName));
            }
            else
            {
                // Hide dropdown if there's only one choice
                jQuery("#subcategorySelectorFor" + chartName).css("display", "none");
            }
            if ("@ViewDataTyped.CanBeChartedCumulatively" === "True")
            {
                cumulativeToggle.on("change",chartSelector_@(ViewDataTyped.ChartUniqueName));
            }
            // Call function to show appropriate chart
            chartSelector_@(ViewDataTyped.ChartUniqueName)();

            GoogleCharts.drawCharts(googleCharts_@(ViewDataTyped.ChartUniqueName)); //height and width get set in javascript for enlarged charts
            jQuery(window).resize(function ()
            {
                GoogleCharts.drawCharts(googleCharts_@(ViewDataTyped.ChartUniqueName));
            });
        }

        // Do per-chart initialization
        chartSetup_@(ViewDataTyped.ChartUniqueName)();
    });
</script>