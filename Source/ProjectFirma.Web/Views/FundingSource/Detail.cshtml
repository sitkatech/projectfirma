@*-----------------------------------------------------------------------
    <copyright file="Detail.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
    Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
    <author>Environmental Science Associates</author>
    </copyright>

    <license>
    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Affero General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

    Source code is available upon request via <support@sitkatech.com>.
    </license>
    -----------------------------------------------------------------------*@
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views
@using ProjectFirma.Web.Views.Shared
@using LtInfo.Common
@using LtInfo.Common.BootstrapWrappers
@using LtInfo.Common.AgGridWrappers
@using LtInfo.Common.ModalDialog
@using LtInfo.Common.Views
@using MoreLinq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirma.Web.Views.FundingSourceCustomAttributes
@using ProjectFirma.Web.Views.PerformanceMeasure
@using Newtonsoft.Json
@using Newtonsoft.Json.Linq

@inherits ProjectFirma.Web.Views.FundingSource.Detail

@section JavascriptAndStylesContent
{
    @{ AgGridIncludes.RenderPartialView(Html); }
    @{ MapJavascriptIncludes.RenderPartialView(Html); }
    <script src="@Url.Content("~/Views/ProjectFundingSourceExpenditure/ProjectFundingSourceExpenditureController.js")" type="text/javascript"></script>
    <style>
        .dl-horizontal dd {
            margin-bottom: 10px;
            line-height: inherit;
        }

        /* customizing the look of the clusters*/
        .marker-cluster-small {
            background-color: #9e9e9e;
            opacity: 0.7;
        }

            .marker-cluster-small div {
                background-color: #9e9e9e;
                opacity: 0.7;
            }

        .marker-cluster-medium {
            background-color: #6e6e6e;
            opacity: 0.7;
        }

            .marker-cluster-medium div {
                background-color: #6e6e6e;
                opacity: 0.7;
            }

        .marker-cluster-large {
            background-color: #3e3e3e;
            opacity: 0.7;
        }

            .marker-cluster-large div {
                background-color: #3e3e3e;
                opacity: 0.7;
            }

        .marker-cluster div {
            color: #e0ffff;
            font-weight: 900;
        }
    </style>
    <style type="text/css" media="only screen and (min-width: 768px)">
        .dl-horizontal dd {
            margin-bottom: 5px;
        }
    </style>

    <script type="text/javascript">

        jQuery(function () {
            jQuery("#overviewTab").on("shown.bs.tab", function () {
                _.forOwn(window.GoogleCharts.chartWrappers,
                    function (chartWrapper) {
                        if (jQuery('#' + chartWrapper.getContainerId()).is(':visible')) {
                            chartWrapper.getChart().clearChart();
                            chartWrapper.draw();
                        }
                    });
            });
            jQuery("#accomplishmentsTab").on("shown.bs.tab", function () {
                _.forOwn(window.GoogleCharts.chartWrappers,
                    function (chartWrapper) {
                        if (jQuery('#' + chartWrapper.getContainerId()).is(':visible')) {
                            chartWrapper.getChart().clearChart();
                            chartWrapper.draw();
                        }
                    });
            });
        });
    </script>
}

<div>
    <a class="btn backButton" href="@ViewDataTyped.ManageFundingSourcesUrl">@BootstrapHtmlHelpers.MakeGlyphIcon("glyphicon-chevron-left") Back to all @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabelPluralized()</a>
</div>
<div class="container-fluid">
    <div class="row">
        <ul class="nav nav-tabs" id="fundingSourceDetailsTabs" style="border-bottom: none;">
            <li class="active">
                <a href="#overview" aria-controls="overview" role="tab" data-toggle="tab" id="overviewTab">Overview</a>
            </li>

            @if (MultiTenantHelpers.TrackAccomplishments())
            {
                <li>
                    <a href="#accomplishments" aria-controls="results" role="tab" data-toggle="tab" id="accomplishmentsTab">Accomplishments</a>
                </li>
            }
        </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-body">
        <div class="tab-content">
            <div role="tabpanel" class="tab-pane active" id="overview">
                <div class="row">
                    <div class="@(MultiTenantHelpers.ReportFinancialsAtProjectLevel() ? "col-lg-5" : "col-xs-12")">
                        <div class="panel panelFirma">
                            <div class="panel-heading panelTitle">
                                @ModalDialogFormHelper.MakeEditIconLink(ViewDataTyped.EditFundingSourceUrl, string.Format("Edit {0} - {1}", FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel(), ViewDataTyped.FundingSource.GetDisplayName()), ViewDataTyped.UserHasFundingSourceManagePermissions) Basics
                            </div>
                            <div class="panel-body">
                                <dl class="dl-horizontal">
                                    <dt>Name</dt>
                                    <dd>@ViewDataTyped.FundingSource.FundingSourceName</dd>

                                    <dt>Description</dt>
                                    <dd>@Html.Raw(ViewDataTyped.FundingSource.FundingSourceDescription.HtmlEncodeWithBreaks())</dd>

                                    <dt>@Html.LabelWithSugarFor(FieldDefinitionEnum.Organization.ToType())</dt>
                                    <dd>@ViewDataTyped.FundingSource.Organization.GetDisplayNameAsUrl()</dd>

                                    <dt>Active?</dt>
                                    <dd>@ViewDataTyped.FundingSource.IsActive.ToYesNo()</dd>

                                    <dt style="white-space: normal">@Html.LabelWithSugarFor(FieldDefinitionEnum.FundingSourceAmount.ToType())</dt>
                                    <dd>
                                        @if (ViewDataTyped.FundingSource.FundingSourceAmount != null)
                                        {
                                            <p>@ViewDataTyped.FundingSource.FundingSourceAmount.ToStringCurrency()</p>
                                        }
                                        else
                                        {
                                            <p class="systemText">Not set or not applicable</p>
                                        }
                                    </dd>
                                </dl>
                            </div>
                        </div>
                        @if (ViewDataTyped.DisplayFundingSourceCustomAttributeTypesViewData.FundingSourceCustomAttributeTypes.Any())
                        {
                            <div class="panel panelFirma">
                                <div class="panel-heading panelTitle">
                                    <h3>
                                        @ModalDialogFormHelper.MakeEditIconLink(ViewDataTyped.EditFundingSourceCustomAttributesUrl, string.Format("Edit {0} Attributes", @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()), 950, ViewDataTyped.UserHasFundingSourceCustomAttributeManagePermissions)
                                        @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() Attributes
                                    </h3>
                                </div>
                                <div class="panel-body">
                                    @{DisplayFundingSourceCustomAttributes.RenderPartialView(Html, ViewDataTyped.DisplayFundingSourceCustomAttributeTypesViewData);}
                                </div>
                            </div>
                        }
                    </div>
                    @if (MultiTenantHelpers.ReportFinancialsAtProjectLevel())
                    {
                        <div class="col-lg-7">
                            <div class="panel panelFirma">
                                <div class="panel-heading panelTitle">
                                    Expenditures by @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()
                                </div>
                                <div class="panel-body">
                                    @if (ViewDataTyped.ViewGoogleChartViewData.HasData)
                                    {
                                        <div style="border-radius: 8px; background-color: white; height: 410px; margin-right: auto; margin-left: auto; width: 600px">
                                            @{ ViewGoogleChart.RenderPartialView(Html, ViewDataTyped.ViewGoogleChartViewData); }
                                        </div>
                                    }
                                    else
                                    {
                                        <p class="systemText">No expenditures to report for this @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()).</p>
                                    }
                                </div>
                            </div>
                        </div>
                    }

                </div>
                <div class="row">
                    <div class="col-md-12">
                        <div class="panel panelFirma">
                            <div class="panel-heading panelTitle">
                                @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() With Expenditures
                            </div>
                            <div class="panel-body">
                                <div class="row">
                                    <div class="col-xs-12">
                                        @if (ViewDataTyped.HasSpatialData)
                                        {
                                            <p>
                                                The map displays the locations of any active @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() and @FieldDefinitionEnum.Proposal.ToType().GetFieldDefinitionLabelPluralized() associated with this @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) that have spatial data.
                                            </p>
                                        }
                                        else
                                        {
                                    <p class="systemText">No spatial data associated with this @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) because there are no @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() with expenditures.</p>
                                        }
                                    </div>
                                    <div class="col-xs-12">
                                        @if (ViewDataTyped.HasSpatialData)
                                        {
                                            <div style="font-weight: bold; margin-top: 10px">
                                                <input style="margin-right: 5px" type="checkbox" id="ClusterLocations" checked="checked" /><label>Cluster @FieldDefinitionEnum.ProjectLocation.ToType().GetFieldDefinitionLabelPluralized()</label>
                                            </div>
                                            <div id="@ViewDataTyped.MapInitJson.MapDivID" style="height: 600px; margin: 5px 0 5px 0">
                                            </div>
                                            <span class="alert" style="font-size: 12px">To zoom, hold down Shift and drag a rectangle.</span>
                                            <script type="text/javascript">
                                                // we are extending ProjectFirma Maps here with functionality specific to this view.  Similar to ProjectLocationMap.cshtml script.
                                                ProjectFirmaMaps.Map.prototype.initializeProjectLocations =
                                                    function(mapInitJson) {
                                                        // default to clustering
                                                        this.areLocationsClustered = true;
                                                        // set the project locations
                                                        this.projectLocations =
                                                            @Html.Raw(JObject.FromObject(ViewDataTyped.ProjectLocationsLayerGeoJson).ToString(Formatting.None));

                                                        // draw the project locations
                                                        this.addLocationLayers();

                                                        // prevent standard popup for lat/long when clicking on general map area (not features)
//                                                        this.removeClickEventHandler();
                                                    };


                                                ProjectFirmaMaps.Map.prototype.changeClustering =
                                                    function(areLocationsClustered) {
                                                        this.areLocationsClustered = areLocationsClustered;
                                                        this.addLocationLayers();
                                                    };

                                                ProjectFirmaMaps.Map.prototype.addLocationLayers = function() {
                                                    this.projectLocationsLayer =
                                                        this.addProjectLocationsToMap(this.projectLocations,
                                                            this.projectLocationsLayer,
                                                            this.projectLocations.LayerName,
                                                            true);
                                                }

                                                ProjectFirmaMaps.Map.prototype.addProjectLocationsToMap =
                                                    function(points, layer, layerName, showByDefault) {
                                                        var firmaMap = this;
                                                        if (layer != null) {
                                                            this.map.removeLayer(layer);
                                                            this.layerControl.removeLayer(layer);
                                                        }

                                                        var markerClusterGroup =
                                                            L.markerClusterGroup({ maxClusterRadius: 40 });
                                                        var newLayer = L.geoJson(points.GeoJsonFeatureCollection,
                                                            {
                                                                pointToLayer: function(feature, latlng) {
                                                                    var featureColor =
                                                                        feature.properties.FeatureColor == null
                                                                            ? points.LayerColor
                                                                            : feature.properties.FeatureColor;
                                                                    var marker = L.marker(latlng,
                                                                        {
                                                                            icon: L.MakiMarkers.icon({
                                                                                icon: "marker",
                                                                                color: featureColor,
                                                                                size: "s"
                                                                            })
                                                                        });
                                                                    firmaMap.bindPopupToFeature(marker, feature);
                                                                    return marker;
                                                                }
                                                            });
                                                        if (this.areLocationsClustered) {
                                                            newLayer.addTo(markerClusterGroup);
                                                            layer = markerClusterGroup;
                                                        } else {
                                                            layer = newLayer;
                                                        }

                                                        if (showByDefault) {
                                                            layer.addTo(this.map);
                                                        }

                                                        this.layerControl.addOverlay(layer, layerName);

                                                        return layer;
                                                    };


                                                jQuery(function() {
                                                    var mapInitJson =
                                                        @Html.Raw(JObject.FromObject(ViewDataTyped.MapInitJson).ToString(Formatting.None));
                                                    var firmaMap = new ProjectFirmaMaps.Map(mapInitJson);
                                                    firmaMap.initializeProjectLocations(mapInitJson);

                                                    var clusterLocationsCheckbox = jQuery("#ClusterLocations");
                                                    clusterLocationsCheckbox.on("change",function() {
                                                        firmaMap.changeClustering(clusterLocationsCheckbox.is(":checked"));
                                                    });

                                                    jQuery("#overviewTab").on("shown.bs.tab",
                                                        function() {
                                                            firmaMap.map.invalidateSize();
                                                        });

                                                });
                                            </script>
                                        }
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                @if (MultiTenantHelpers.ReportFinancialsAtProjectLevel())
                {
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="panel panelFirma">
                                <div class="panel-heading panelTitle">
                                    @FieldDefinitionEnum.ReportedExpenditure.ToType().GetFieldDefinitionLabelPluralized()
                                </div>
                                <div class="panel-body">
                                    @Html.AgGrid(ViewDataTyped.ProjectCalendarYearExpendituresGridSpec, ViewDataTyped.ProjectCalendarYearExpendituresGridName, ViewDataTyped.ProjectCalendarYearExpendituresGridDataUrl, "height:300px", AgGridResizeType.VerticalResizableHorizontalAutoFit)
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="panel panelFirma">
                                <div class="panel-heading panelTitle">
                                    Budget by @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()
                                </div>
                                <div class="panel-body">
                                    @Html.AgGrid(ViewDataTyped.ProjectFundingSourceBudgetGridSpec, ViewDataTyped.ProjectFundingSourceBudgetGridName, ViewDataTyped.ProjectFundingSourceBudgetGridDataUrl, "height:300px", AgGridResizeType.VerticalResizableHorizontalAutoFit)
                                </div>
                            </div>
                        </div>
                    </div>
                }

            </div>
            @if (MultiTenantHelpers.TrackAccomplishments())
            {
                <div role="tabpanel" class="tab-pane" id="accomplishments">
                    @if (ViewDataTyped.PerformanceMeasureChartViewDatas.Any())
                    {
                        <p>
                            The reported @MultiTenantHelpers.GetPerformanceMeasureName() results within this @FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel() are charted here. Results are included for every @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel() that is assigned to this @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()). To see the full results for a @MultiTenantHelpers.GetPerformanceMeasureName(), click the @MultiTenantHelpers.GetPerformanceMeasureName() name in the chart title.
                        </p>
                        foreach (var batch in ViewDataTyped.PerformanceMeasureChartViewDatas.Batch(2))
                        {
                            <div class="row">
                                @foreach (var performanceMeasureChartViewData in batch)
                                {
                                    <div class="col-xs-12 col-sm-12 col-md-12 col-lg-6">
                                        <div class="panel panelFirma">
                                            <div class="panel-body">
                                                <div style="margin: auto;">
                                                    @{ PerformanceMeasureChart.RenderPartialView(Html, performanceMeasureChartViewData); }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                    }
                    else
                    {
                        <div class="row">
                            <div class="col-xs-12">
                                <p class="systemText">
                                    There are no @FieldDefinitionEnum.PerformanceMeasure.ToType().GetFieldDefinitionLabelPluralized() to report for this @(FieldDefinitionEnum.FundingSource.ToType().GetFieldDefinitionLabel()) because there are no @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() with expenditures or the @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized() are in the @ProjectStage.PlanningDesign.GetProjectStageDisplayName() stage.
                                </p>
                            </div>
                        </div>
                    }
                </div>
            }
        </div>
    </div>
</div>

