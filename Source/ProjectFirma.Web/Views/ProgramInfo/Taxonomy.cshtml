@*-----------------------------------------------------------------------
<copyright file="Taxonomy.cshtml" company="Tahoe Regional Planning Agency and Environmental Science Associates">
Copyright (c) Tahoe Regional Planning Agency and Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*@
@using Newtonsoft.Json.Linq
@using ProjectFirma.Web.Common
@using ProjectFirma.Web.Models
@using ProjectFirmaModels.Models
@using ProjectFirma.Web.Views.Shared
@inherits ProjectFirma.Web.Views.ProgramInfo.Taxonomy
@section JavascriptAndStylesContent
{
    <script type="text/javascript" src="/Content/fancytree/jquery.fancytree-all.min.js"></script>
    <link rel="stylesheet" href="/Content/fancytree/skin-bootstrap/ui.fancytree.min.css" type="text/css" />

    <style>
        .fancytree-link {
            text-decoration: underline;
            cursor: pointer;
        }

        .fancytree-ext-filter span.fancytree-childcounter {
            height: auto;
            top: 0;
            font-size: 12px;
            margin-right: 3px;
            border-radius: 10px;
            line-height: initial;
        }
        .fancytree-match td {
            background-color: rgba(243, 243, 21, 0.4) !important;
        }

        table.projecttaxonomytree > tbody > tr.fancytree-active > td
        {
            background-color: transparent !important;
            color: initial !important;
        }

        table.projecttaxonomytree {
            border: 5px solid;
            border-radius: 12px;
        }

        table.projecttaxonomytree thead {
            display: none;
        }

        table.projecttaxonomytree > tbody > tr > td {
            padding: 1px 5px 1px 5px;
        }

        table.fancytree-ext-table {
            border-collapse: separate;
        }

        table.projecttaxonomytree tbody tr:first-child td {
            border-top: 0 none;
        }

        table.projecttaxonomytree tbody tr td {
            border-top: 1px dotted;
        }

        table.projecttaxonomytree tbody tr td:last-child {
            text-align: right;
        }

        table.fancytree-ext-table span.fancytree-node {
            display: table;
        }
        table.fancytree-ext-table span.fancytree-expander {
            display: table-cell;
        }
        table.fancytree-ext-table span.fancytree-icon {
            display: table-cell;
        }
        table.fancytree-ext-table span.fancytree-title {
            display: table-cell;
        }
    </style>
}

<div>
    @{ ViewPageContent.RenderPartialView(Html, ViewDataTyped.ViewPageContentViewData); }
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <button id="btnExpandLevel" class="btn btn-sm btn-primary">Expand Level</button>
        <button id="btnCollapseLevel" class="btn btn-sm btn-primary">Collapse Level</button>
        <input name="search" placeholder="Search..." autocomplete="on">
        <button id="btnResetSearch" class="btn btn-xs btn-primary">&times;</button>
        <span id="matches"></span>
    </div>
    <div style="padding: 0 15px;">
        <div class="pull-left" style="font-weight: bold">
            @if (ViewDataTyped.TaxonomyLevel == TaxonomyLevel.Trunk)
            {
                @ViewDataTyped.TaxonomyTrunkDisplayName <span class='glyphicon glyphicon-chevron-right'></span>
                @ViewDataTyped.TaxonomyBranchDisplayName <span class='glyphicon glyphicon-chevron-right'></span>
            }
            @if (ViewDataTyped.TaxonomyLevel == TaxonomyLevel.Branch)
            {
            @ViewDataTyped.TaxonomyBranchDisplayName <span class='glyphicon glyphicon-chevron-right'></span>
            }            
            @ViewDataTyped.TaxonomyLeafDisplayName <span class='glyphicon glyphicon-chevron-right'></span>
            @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabel()
        </div>
        <div class="pull-right" style="font-weight: bold">
            Number of @FieldDefinitionEnum.Project.ToType().GetFieldDefinitionLabelPluralized()
        </div>
        <div style="clear: both">
            @foreach (var taxonomyTier in ViewDataTyped.TopLevelTaxonomyTierAsFancyTreeNodes)
            {
                <table id="@(string.Format("projecttaxonomytree{0}", taxonomyTier.Key))" class="table table-hover table-condensed projecttaxonomytree" style="margin-bottom: 10px; border-color: @taxonomyTier.ThemeColor">
                    <colgroup>
                        <col />
                        <col style="width: 80px;" />
                        <col style="width: 100px;" />
                    </colgroup>
                    <thead>
                        <tr>
                            <th></th>
                            <th></th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
            }
        </div>
    </div>
</div>

<script>
    jQuery(function()
    {
        var glyph_opts = {
            map: {
                //doc: "glyphicon glyphicon-file",
                //docOpen: "glyphicon glyphicon-file",
                checkbox: "glyphicon glyphicon-unchecked",
                checkboxSelected: "glyphicon glyphicon-check",
                checkboxUnknown: "glyphicon glyphicon-share",
                dragHelper: "glyphicon glyphicon-play",
                dropMarker: "glyphicon glyphicon-arrow-right",
                error: "glyphicon glyphicon-warning-sign",
                expanderClosed: "glyphicon glyphicon-plus",
                expanderLazy: "glyphicon glyphicon-plus-sign", // glyphicon-expand
                expanderOpen: "glyphicon glyphicon-minus", // glyphicon-collapse-down
                folder: "glyphicon glyphicon-folder-close",
                folderOpen: "glyphicon glyphicon-folder-open",
                loading: "glyphicon glyphicon-refresh"
            }
        };
        var treeSources = @Html.Raw(JArray.FromObject(ViewDataTyped.TopLevelTaxonomyTierAsFancyTreeNodes));
        for (var i = 0; i < treeSources.length; ++i)
        {
            var currentTreeSource = treeSources[i];
            var currentTreeDiv = jQuery("#projecttaxonomytree" + currentTreeSource.key);
            currentTreeDiv.fancytree({
                extensions: ["glyph", "table", "filter"],
                quicksearch: true,
                glyph: glyph_opts,
                table: {
                    nodeColumnIdx: 0,
                    indentation: 30
                },
                filter: {
                    autoExpand: false,
                    counter: true, // Show a badge with number of matching child nodes near parent icon
                    fuzzy: false, // Match single characters in order, e.g. 'fb' will match 'FooBar'
                    hideExpandedCounter: true, // Hide counter badge, when parent is expanded
                    highlight: true, // Highlight matches by wrapping inside <mark> tags
                    mode: "dimm" // "dimm": Grayout unmatched nodes, "hide": remove unmatched nodes
                },
                renderColumns: function(event, data) { renderFancyTreeColumns(event, data) },
                source: [currentTreeSource]
            });
        }

        var expandLevelButton = jQuery('#btnExpandLevel');
        var collapseLevelButton = jQuery('#btnCollapseLevel');
        var searchButton = jQuery("input[name=search]");
        var resetButton = jQuery("button#btnResetSearch");

        expandLevelButton.click(function()
        {
            var maximumExpansion = 1;
            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");
                tree.visit(function(node)
                {
                    if (node.isVisible())
                    {
                        maximumExpansion = Math.max(maximumExpansion, node.getLevel());
                    }
                });
            }
            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");                
                tree.visit(function(node)
                {
                    if (node.getLevel() <= maximumExpansion)
                    {
                        node.setExpanded(true);
                    }
                });
            }
        });

        collapseLevelButton.click(function()
        {
            var maximumExpansion = 1;

            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");
                tree.visit(function(node)
                {
                    if (node.isExpanded())
                    {
                        maximumExpansion = Math.max(maximumExpansion, node.getLevel());
                    }
                });
            }

            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");
                tree.visit(function(node)
                {
                    if (node.getLevel() == maximumExpansion)
                    {
                        node.setExpanded(false);
                    }
                });
            }
        });

        searchButton.keyup(function(e)
        {
            var match = jQuery(this).val();

            if (e && e.which === $.ui.keyCode.ESCAPE || match.trim() === "")
            {
                resetButton.click();
                return;
            }
            var n = 0;
            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");
                n += tree.filterNodes(function(node) { return new RegExp(match, "i").test(node.title); });
            }
            resetButton.attr("disabled", false);
            jQuery("span#matches").text("(" + n + " matches)");
        }).focus();

        resetButton.click(function (e) {
            searchButton.val("");
            jQuery("span#matches").text("");
            for (var i = 0; i < treeSources.length; ++i)
            {
                var currentTreeSource = treeSources[i];
                var tree = jQuery("#projecttaxonomytree" + currentTreeSource.key).fancytree("getTree");
                tree.clearFilter();
            }
        }).attr("disabled", true);

        searchButton.keyup();
    });

    function renderFancyTreeColumns(event, data)
    {
        var node = data.node;
        var tr = jQuery(node.tr);
        var $tdList = tr.find(">td");

        var titleColumn = $tdList.eq(0);
        var mapColumn = $tdList.eq(1);
        var numberOfProjectsColumn = $tdList.eq(2);
        if (node.data.NumberOfProjects != null)
        {
            numberOfProjectsColumn.text(node.data.NumberOfProjects);
        }
        titleColumn.css("border-top-color", node.data.ThemeColor);
        mapColumn.css("border-top-color", node.data.ThemeColor);
        numberOfProjectsColumn.css("border-top-color", node.data.ThemeColor);
        
        if (!Sitka.Methods.isUndefinedNullOrEmpty(node.data.MapUrl)) {
            mapColumn.html("<a class='btn btn-sm' style='color:white; text-decoration:none; background-color:" +
                node.data.ThemeColor + "' href='" + node.data.MapUrl +
                "'>Map <span class='glyphicon glyphicon-map-marker'></span></button>");
        }
    }
</script>
