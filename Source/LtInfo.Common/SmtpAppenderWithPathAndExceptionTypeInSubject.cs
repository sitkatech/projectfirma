/*-----------------------------------------------------------------------
<copyright file="SmtpAppenderWithPathAndExceptionTypeInSubject.cs" company="Environmental Science Associates">
Copyright (c) Environmental Science Associates. All rights reserved.
<author>Environmental Science Associates</author>
</copyright>

<license>
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU Affero General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU Affero General Public License <http://www.gnu.org/licenses/> for more details.

Source code is available upon request via <support@sitkatech.com>.
</license>
-----------------------------------------------------------------------*/
using System;
using System.Collections.Generic;
using System.Linq;
using log4net.Appender;
using log4net.Core;

namespace LtInfo.Common
{
    /// <summary>
    /// The base SmtpAppender is capable of buffering log events based on it's configuration
    /// The subject of an email generated by this appender will be modified only if one log event is queued
    /// Otherwise, this appender behaves the same as the standard SmtpAppender
    /// Recommended configuration to take advantage of this customization is:
    ///   &lt;appender name="SmtpAppender" type="LtInfo.Common.SmtpAppenderWithPathAndExceptionTypeInSubject, LtInfo.Common"&gt;
    ///     &lt;to value="bob@company.com" /&gt;
    ///     &lt;from value="alice@company.com" /&gt;
    ///     &lt;subject value="Alert: application error" /&gt;
    ///     &lt;smtpHost value="server" /&gt;
    ///     &lt;bufferSize value="1" /&gt;
    ///     &lt;threshold value="ERROR"/&gt;
    ///     &lt;layout type="log4net.Layout.PatternLayout"&gt;
    ///       &lt;conversionPattern value="%date;%thread;%-5level;%logger;%newline%newline%message" /&gt;
    ///      &lt;/layout&gt;
    ///   &lt;/appender&gt;
    /// </summary>
    public class SmtpAppenderWithPathAndExceptionTypeInSubject : SmtpAppender
    {
        private string _baseSubject;
        private string BaseSubject
        {
            get
            {
                if (string.IsNullOrEmpty(_baseSubject))
                    _baseSubject = Subject;
                return _baseSubject;
            }
        }

        protected override void SendBuffer(LoggingEvent[] events)
        {
            // The base SmtpAppender is capable of buffering log events based on it's configuration. So the subject of an email generated by this appender can only modified if a single log event is queued
            if (events.Length == 1)
            {
                var theSingleEvent = events[0];
                var context = System.Web.HttpContext.Current;
                var exception = theSingleEvent.ExceptionObject;

                var pathAndQuery = context == null ? string.Empty : context.Request.HttpMethod + " " + context.Request.Url.PathAndQuery;
                var rootExceptionType = ExceptionToInfoForMessageSubjectIfAny(exception);
                var pathAndException = string.Join(" ", (new[] {pathAndQuery, rootExceptionType}).Where(s => !string.IsNullOrWhiteSpace(s)));
                var additionalDetails = (!string.IsNullOrWhiteSpace(pathAndException) ? string.Format(" {0}", pathAndException) : string.Empty);

                Subject = BaseSubject + additionalDetails;
            }
            base.SendBuffer(events);
        }

        /// <summary>
        /// Pulls out exception information from exception if any into something that can fit into an email message subject
        /// </summary>
        /// <param name="exception">Could be null</param>
        /// <returns>A string representing the entire exception chained together such as: SqlException--->Win32Exception</returns>
        private static string ExceptionToInfoForMessageSubjectIfAny(Exception exception)
        {
            var exceptionTypes = new List<string>();
            var currentException = exception;
            while (currentException != null)
            {
                exceptionTypes.Add(currentException.GetType().Name);
                currentException = currentException.InnerException;
            }
            var exceptionTypesRolledUp = String.Join("--->", exceptionTypes);
            return exceptionTypesRolledUp;
        }
    }
}
