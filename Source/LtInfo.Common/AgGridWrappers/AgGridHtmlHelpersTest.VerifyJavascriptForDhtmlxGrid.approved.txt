    <!-- The div that will host the grid. ag-theme-alpine is the theme. -->
    <!-- The grid will be the size that this element is given. -->
    <div>
        <div ><span id="testGridNameRowCountText"></span> <a id="testGridNameClearFilters" style="display: none" href="javascript: void(0);" onclick="testGridNameClearFilters()">(clear filters)</a></div>
      </div>
    <div id="testGridNameDivID" class="ag-theme-alpine" style="height:250px;"></div>
    <script type="text/javascript">

            function testGridNameClearFilters(){
                testGridNameGridOptions.api.setFilterModel(null);
                document.getElementById("testGridNameClearFilters").style.display = "none";
            }



            function testGridNameResizeGridWithVerticalFill(){
                var top = getOffsetTop(document.getElementById("testGridNameDivID"));
                gridHeight =getGridHeight(top);
                document.getElementById("testGridNameDivID").style.height = gridHeight+"px";
            }
            addEventListener("resize", (event) => {  }); ; // insert method to resize grid vertically if grid resize type is VerticalResizableHorizontalAutoFit

            function testGridNameMakeGridVerticallyResizable() {
                document.getElementById("testGridNameDivID").style.resize = "vertical";
                document.getElementById("testGridNameDivID").style.overflow = "auto";
            }
             // insert method to make grid vertically resizable if the grid resize type is VerticalResizableHorizontalAutoFit

            function testGridNameGeneratePinnedBottomData(){
                // generate a row-data with null values
                var result = {};

                testGridNameGridOptions.columnApi.getAllGridColumns().forEach(item => {
                    result[item.colId] = null;
                    if(item.colDef.aggregationType === "total") {
                        columnsWithAggregation.push(item.colId);
                    }
                });
                var columnsWithAggregation = ["Amount"];
                if(columnsWithAggregation.length === 0){ return false;}
                return testGridNameCalculatePinnedBottomData(result, columnsWithAggregation);
            }
            function testGridNameCalculatePinnedBottomData(target, columnsWithAggregation){
                //console.log(target);
                
                columnsWithAggregation.forEach(element => {
                  //console.log('element', element);
                    testGridNameGridOptions.api.forEachNodeAfterFilter((rowNode) => {
                        if (rowNode.data[element]){
                            if(target[element]){
                                target[element] = (Number.parseFloat(target[element]) + Number.parseFloat(rowNode.data[element])).toFixed(2);
                            }else{
                                target[element] = Number.parseFloat(rowNode.data[element]).toFixed(2);
                            }
                            
                        }
                    });
                    if (target[element]){
                        target[element] = target[element];//.toFixed(2);
                    }
                })

                return target;
            }


        // Function to demonstrate calling grid's API
        function deselect(){
            testGridNameGridOptions.api.deselectAll()
        }

        // Grid Options are properties passed to the grid
        const testGridNameGridOptions = {

          // each entry here represents one column
          columnDefs: [
            { "field": "", "headerName": "", "headerComponentParams": { "template": "<div class=\"ag-cell-label-container\" role=\"presentation\"><span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\"></span><div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\"><span ref=\"eSortOrder\" class=\"ag-header-icon ag-sort-order\" ></span><span ref=\"eSortAsc\" class=\"ag-header-icon ag-sort-ascending-icon\" ></span><span ref=\"eSortDesc\" class=\"ag-header-icon ag-sort-descending-icon\" ></span><span ref=\"eSortNone\" class=\"ag-header-icon ag-sort-none-icon\" ></span><span ref=\"eText2\" class=\"ag-header-cell-text\" role=\"columnheader\"></span><span ref=\"eFilter\" class=\"ag-header-icon ag-filter-icon\"></span></div></div>" }, "resizable": true, "initialWidth": 65, "cellRenderer": function(params) { return params.value ? params.value: ''; }  },{ "field": "", "headerName": "", "headerComponentParams": { "template": "<div class=\"ag-cell-label-container\" role=\"presentation\"><span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\"></span><div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\"><span ref=\"eSortOrder\" class=\"ag-header-icon ag-sort-order\" ></span><span ref=\"eSortAsc\" class=\"ag-header-icon ag-sort-ascending-icon\" ></span><span ref=\"eSortDesc\" class=\"ag-header-icon ag-sort-descending-icon\" ></span><span ref=\"eSortNone\" class=\"ag-header-icon ag-sort-none-icon\" ></span><span ref=\"eText2\" class=\"ag-header-cell-text\" role=\"columnheader\"></span><span ref=\"eFilter\" class=\"ag-header-icon ag-filter-icon\"></span></div></div>" }, "resizable": true, "initialWidth": 65, "cellRenderer": function(params) { return params.value ? params.value: ''; }  },{ "field": "DisplayName", "headerName": "Display Name", "headerComponentParams": { "template": "<div class=\"ag-cell-label-container\" role=\"presentation\"><span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\"></span><div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\"><span ref=\"eSortOrder\" class=\"ag-header-icon ag-sort-order\" ></span><span ref=\"eSortAsc\" class=\"ag-header-icon ag-sort-ascending-icon\" ></span><span ref=\"eSortDesc\" class=\"ag-header-icon ag-sort-descending-icon\" ></span><span ref=\"eSortNone\" class=\"ag-header-icon ag-sort-none-icon\" ></span><span ref=\"eText2\" class=\"ag-header-cell-text\" role=\"columnheader\">Display Name</span><span ref=\"eFilter\" class=\"ag-header-icon ag-filter-icon\"></span></div></div>" }, "resizable": true, "initialWidth": 230, "filter": "agTextColumnFilter" },{ "field": "IsActive", "headerName": "Is Active", "headerComponentParams": { "template": "<div class=\"ag-cell-label-container\" role=\"presentation\"><span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\"></span><div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\"><span ref=\"eSortOrder\" class=\"ag-header-icon ag-sort-order\" ></span><span ref=\"eSortAsc\" class=\"ag-header-icon ag-sort-ascending-icon\" ></span><span ref=\"eSortDesc\" class=\"ag-header-icon ag-sort-descending-icon\" ></span><span ref=\"eSortNone\" class=\"ag-header-icon ag-sort-none-icon\" ></span><span ref=\"eText2\" class=\"ag-header-cell-text\" role=\"columnheader\">Is Active</span><span ref=\"eFilter\" class=\"ag-header-icon ag-filter-icon\"></span></div></div>" }, "resizable": true, "initialWidth": 90 },{ "field": "Amount", "headerName": "Amount", "headerComponentParams": { "template": "<div class=\"ag-cell-label-container\" role=\"presentation\"><span ref=\"eMenu\" class=\"ag-header-icon ag-header-cell-menu-button\"></span><div ref=\"eLabel\" class=\"ag-header-cell-label\" role=\"presentation\"><span ref=\"eSortOrder\" class=\"ag-header-icon ag-sort-order\" ></span><span ref=\"eSortAsc\" class=\"ag-header-icon ag-sort-ascending-icon\" ></span><span ref=\"eSortDesc\" class=\"ag-header-icon ag-sort-descending-icon\" ></span><span ref=\"eSortNone\" class=\"ag-header-icon ag-sort-none-icon\" ></span><span ref=\"eText2\" class=\"ag-header-cell-text\" role=\"columnheader\">Amount</span><span ref=\"eFilter\" class=\"ag-header-icon ag-filter-icon\"></span></div></div>" }, "resizable": true, "initialWidth": 130, "filter": "agNumberColumnFilter", "valueFormatter": currencyFormatter, "cellClass": "ag-right-aligned-cell" }
          ],

          // default col def properties get applied to all columns
          defaultColDef: {sortable: true, filter: true, floatingFilter:true, wrapHeaderText: true, autoHeaderHeight: true, },
          rowSelection: 'multiple', // allow rows to be selected
          animateRows: true, // have rows animate to new positions when sorted

          dataTypeDefinitions: {
            dateString: getDateStringDataTypeDefinition()
          },


          onFilterChanged: function() {
            document.getElementById("testGridNameRowCountText").innerText="Currently Viewing "+testGridNameGridOptions.api.getDisplayedRowCount()+ " out of " + testGridNameTotalRowCount + " SOYs";
            if(Object.keys(testGridNameGridOptions.api.getFilterModel()).length !== 0){
                document.getElementById("testGridNameClearFilters").style.display = "inline-block";
            }
          },

          // example event handler
          onCellClicked: params => {
            //debugger;
            console.log('cell was clicked', params)

          }
        };

        // get div to host the grid
        const testGridNameGridDiv = document.getElementById("testGridNameDivID");
        // new grid instance, passing in the hosting DIV and Grid Options
        new agGrid.Grid(testGridNameGridDiv, testGridNameGridOptions);
        var testGridNameTotalRowCount = 0;
        // Fetch data from server
        fetch("TestController/ListGridDataXml")
        .then(response => response.json())
        .then(data => {
            // load fetched data into grid
            testGridNameGridOptions.api.setRowData(data);
            testGridNameTotalRowCount = data.length;
            document.getElementById("testGridNameRowCountText").innerText="Currently Viewing "+testGridNameGridOptions.api.getDisplayedRowCount()+ " out of " + testGridNameTotalRowCount + " SOYs"; 
            ; // insert method to resize grid vertically if grid resize type is VerticalResizableHorizontalAutoFit
            var testGridNamePinnedBottomData = testGridNameGeneratePinnedBottomData();
            if(testGridNamePinnedBottomData){
                testGridNameGridOptions.api.setPinnedBottomRowData([testGridNamePinnedBottomData]);
            }
        });
    </script>